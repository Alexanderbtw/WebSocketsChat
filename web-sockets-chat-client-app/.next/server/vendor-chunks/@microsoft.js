"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@microsoft";
exports.ids = ["vendor-chunks/@microsoft"];
exports.modules = {

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/AbortController.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/AbortController.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ AbortController)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n// Not exported from index.\n/** @private */ class AbortController {\n    constructor(){\n        this._isAborted = false;\n        this.onabort = null;\n    }\n    abort() {\n        if (!this._isAborted) {\n            this._isAborted = true;\n            if (this.onabort) {\n                this.onabort();\n            }\n        }\n    }\n    get signal() {\n        return this;\n    }\n    get aborted() {\n        return this._isAborted;\n    }\n} //# sourceMappingURL=AbortController.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0Fib3J0Q29udHJvbGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0VBQWdFO0FBQ2hFLHVFQUF1RTtBQUN2RSxxRkFBcUY7QUFDckYsMEZBQTBGO0FBQzFGLGlDQUFpQztBQUNqQywyQkFBMkI7QUFDM0IsYUFBYSxHQUNOLE1BQU1BO0lBQ1RDLGFBQWM7UUFDVixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNuQjtJQUNBQyxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQ0YsVUFBVSxFQUFFO1lBQ2xCLElBQUksQ0FBQ0EsVUFBVSxHQUFHO1lBQ2xCLElBQUksSUFBSSxDQUFDQyxPQUFPLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDQSxPQUFPO1lBQ2hCO1FBQ0o7SUFDSjtJQUNBLElBQUlFLFNBQVM7UUFDVCxPQUFPLElBQUk7SUFDZjtJQUNBLElBQUlDLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ0osVUFBVTtJQUMxQjtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLXNvY2tldHMtY2hhdC1jbGllbnQtYXBwLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2VzbS9BYm9ydENvbnRyb2xsZXIuanM/NGRmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgLk5FVCBGb3VuZGF0aW9uIHVuZGVyIG9uZSBvciBtb3JlIGFncmVlbWVudHMuXHJcbi8vIFRoZSAuTkVUIEZvdW5kYXRpb24gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbi8vIFJvdWdoIHBvbHlmaWxsIG9mIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9BYm9ydENvbnRyb2xsZXJcclxuLy8gV2UgZG9uJ3QgYWN0dWFsbHkgZXZlciB1c2UgdGhlIEFQSSBiZWluZyBwb2x5ZmlsbGVkLCB3ZSBhbHdheXMgdXNlIHRoZSBwb2x5ZmlsbCBiZWNhdXNlXHJcbi8vIGl0J3MgYSB2ZXJ5IG5ldyBBUEkgcmlnaHQgbm93LlxyXG4vLyBOb3QgZXhwb3J0ZWQgZnJvbSBpbmRleC5cclxuLyoqIEBwcml2YXRlICovXHJcbmV4cG9ydCBjbGFzcyBBYm9ydENvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5faXNBYm9ydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbmFib3J0ID0gbnVsbDtcclxuICAgIH1cclxuICAgIGFib3J0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzQWJvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uYWJvcnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25hYm9ydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IHNpZ25hbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGdldCBhYm9ydGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Fib3J0ZWQ7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRDb250cm9sbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJBYm9ydENvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsIl9pc0Fib3J0ZWQiLCJvbmFib3J0IiwiYWJvcnQiLCJzaWduYWwiLCJhYm9ydGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/AbortController.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/AccessTokenHttpClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/AccessTokenHttpClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessTokenHttpClient: () => (/* binding */ AccessTokenHttpClient)\n/* harmony export */ });\n/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HeaderNames */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HeaderNames.js\");\n/* harmony import */ var _HttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n/** @private */ class AccessTokenHttpClient extends _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpClient {\n    constructor(innerClient, accessTokenFactory){\n        super();\n        this._innerClient = innerClient;\n        this._accessTokenFactory = accessTokenFactory;\n    }\n    async send(request) {\n        let allowRetry = true;\n        if (this._accessTokenFactory && (!this._accessToken || request.url && request.url.indexOf(\"/negotiate?\") > 0)) {\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\n            allowRetry = false;\n            this._accessToken = await this._accessTokenFactory();\n        }\n        this._setAuthorizationHeader(request);\n        const response = await this._innerClient.send(request);\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\n            this._accessToken = await this._accessTokenFactory();\n            this._setAuthorizationHeader(request);\n            return await this._innerClient.send(request);\n        }\n        return response;\n    }\n    _setAuthorizationHeader(request) {\n        if (!request.headers) {\n            request.headers = {};\n        }\n        if (this._accessToken) {\n            request.headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.Authorization] = `Bearer ${this._accessToken}`;\n        } else if (this._accessTokenFactory) {\n            if (request.headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.Authorization]) {\n                delete request.headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.Authorization];\n            }\n        }\n    }\n    getCookieString(url) {\n        return this._innerClient.getCookieString(url);\n    }\n} //# sourceMappingURL=AccessTokenHttpClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0FjY2Vzc1Rva2VuSHR0cENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQzNCO0FBQ0Y7QUFDMUMsYUFBYSxHQUNOLE1BQU1FLDhCQUE4QkQsbURBQVVBO0lBQ2pERSxZQUFZQyxXQUFXLEVBQUVDLGtCQUFrQixDQUFFO1FBQ3pDLEtBQUs7UUFDTCxJQUFJLENBQUNDLFlBQVksR0FBR0Y7UUFDcEIsSUFBSSxDQUFDRyxtQkFBbUIsR0FBR0Y7SUFDL0I7SUFDQSxNQUFNRyxLQUFLQyxPQUFPLEVBQUU7UUFDaEIsSUFBSUMsYUFBYTtRQUNqQixJQUFJLElBQUksQ0FBQ0gsbUJBQW1CLElBQUssRUFBQyxJQUFJLENBQUNJLFlBQVksSUFBS0YsUUFBUUcsR0FBRyxJQUFJSCxRQUFRRyxHQUFHLENBQUNDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFJO1lBQzdHLG9IQUFvSDtZQUNwSEgsYUFBYTtZQUNiLElBQUksQ0FBQ0MsWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDSixtQkFBbUI7UUFDdEQ7UUFDQSxJQUFJLENBQUNPLHVCQUF1QixDQUFDTDtRQUM3QixNQUFNTSxXQUFXLE1BQU0sSUFBSSxDQUFDVCxZQUFZLENBQUNFLElBQUksQ0FBQ0M7UUFDOUMsSUFBSUMsY0FBY0ssU0FBU0MsVUFBVSxLQUFLLE9BQU8sSUFBSSxDQUFDVCxtQkFBbUIsRUFBRTtZQUN2RSxJQUFJLENBQUNJLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQ0osbUJBQW1CO1lBQ2xELElBQUksQ0FBQ08sdUJBQXVCLENBQUNMO1lBQzdCLE9BQU8sTUFBTSxJQUFJLENBQUNILFlBQVksQ0FBQ0UsSUFBSSxDQUFDQztRQUN4QztRQUNBLE9BQU9NO0lBQ1g7SUFDQUQsd0JBQXdCTCxPQUFPLEVBQUU7UUFDN0IsSUFBSSxDQUFDQSxRQUFRUSxPQUFPLEVBQUU7WUFDbEJSLFFBQVFRLE9BQU8sR0FBRyxDQUFDO1FBQ3ZCO1FBQ0EsSUFBSSxJQUFJLENBQUNOLFlBQVksRUFBRTtZQUNuQkYsUUFBUVEsT0FBTyxDQUFDakIscURBQVdBLENBQUNrQixhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNQLFlBQVksQ0FBQyxDQUFDO1FBQzlFLE9BRUssSUFBSSxJQUFJLENBQUNKLG1CQUFtQixFQUFFO1lBQy9CLElBQUlFLFFBQVFRLE9BQU8sQ0FBQ2pCLHFEQUFXQSxDQUFDa0IsYUFBYSxDQUFDLEVBQUU7Z0JBQzVDLE9BQU9ULFFBQVFRLE9BQU8sQ0FBQ2pCLHFEQUFXQSxDQUFDa0IsYUFBYSxDQUFDO1lBQ3JEO1FBQ0o7SUFDSjtJQUNBQyxnQkFBZ0JQLEdBQUcsRUFBRTtRQUNqQixPQUFPLElBQUksQ0FBQ04sWUFBWSxDQUFDYSxlQUFlLENBQUNQO0lBQzdDO0FBQ0osRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItc29ja2V0cy1jaGF0LWNsaWVudC1hcHAvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0FjY2Vzc1Rva2VuSHR0cENsaWVudC5qcz9iMGE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSAuTkVUIEZvdW5kYXRpb24gdW5kZXIgb25lIG9yIG1vcmUgYWdyZWVtZW50cy5cclxuLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuaW1wb3J0IHsgSGVhZGVyTmFtZXMgfSBmcm9tIFwiLi9IZWFkZXJOYW1lc1wiO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIi4vSHR0cENsaWVudFwiO1xyXG4vKiogQHByaXZhdGUgKi9cclxuZXhwb3J0IGNsYXNzIEFjY2Vzc1Rva2VuSHR0cENsaWVudCBleHRlbmRzIEh0dHBDbGllbnQge1xyXG4gICAgY29uc3RydWN0b3IoaW5uZXJDbGllbnQsIGFjY2Vzc1Rva2VuRmFjdG9yeSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5faW5uZXJDbGllbnQgPSBpbm5lckNsaWVudDtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkZhY3RvcnkgPSBhY2Nlc3NUb2tlbkZhY3Rvcnk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZW5kKHJlcXVlc3QpIHtcclxuICAgICAgICBsZXQgYWxsb3dSZXRyeSA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FjY2Vzc1Rva2VuRmFjdG9yeSAmJiAoIXRoaXMuX2FjY2Vzc1Rva2VuIHx8IChyZXF1ZXN0LnVybCAmJiByZXF1ZXN0LnVybC5pbmRleE9mKFwiL25lZ290aWF0ZT9cIikgPiAwKSkpIHtcclxuICAgICAgICAgICAgLy8gZG9uJ3QgcmV0cnkgaWYgdGhlIHJlcXVlc3QgaXMgYSBuZWdvdGlhdGUgb3IgaWYgd2UganVzdCBnb3QgYSBwb3RlbnRpYWxseSBuZXcgdG9rZW4gZnJvbSB0aGUgYWNjZXNzIHRva2VuIGZhY3RvcnlcclxuICAgICAgICAgICAgYWxsb3dSZXRyeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuX2FjY2Vzc1Rva2VuRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlcXVlc3QpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5faW5uZXJDbGllbnQuc2VuZChyZXF1ZXN0KTtcclxuICAgICAgICBpZiAoYWxsb3dSZXRyeSAmJiByZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDEgJiYgdGhpcy5fYWNjZXNzVG9rZW5GYWN0b3J5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuID0gYXdhaXQgdGhpcy5fYWNjZXNzVG9rZW5GYWN0b3J5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldEF1dGhvcml6YXRpb25IZWFkZXIocmVxdWVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9pbm5lckNsaWVudC5zZW5kKHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBfc2V0QXV0aG9yaXphdGlvbkhlYWRlcihyZXF1ZXN0KSB7XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMpIHtcclxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9hY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbSGVhZGVyTmFtZXMuQXV0aG9yaXphdGlvbl0gPSBgQmVhcmVyICR7dGhpcy5fYWNjZXNzVG9rZW59YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZG9uJ3QgcmVtb3ZlIHRoZSBoZWFkZXIgaWYgdGhlcmUgaXNuJ3QgYW4gYWNjZXNzIHRva2VuIGZhY3RvcnksIHRoZSB1c2VyIG1hbnVhbGx5IGFkZGVkIHRoZSBoZWFkZXIgaW4gdGhpcyBjYXNlXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fYWNjZXNzVG9rZW5GYWN0b3J5KSB7XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmhlYWRlcnNbSGVhZGVyTmFtZXMuQXV0aG9yaXphdGlvbl0pIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbSGVhZGVyTmFtZXMuQXV0aG9yaXphdGlvbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb29raWVTdHJpbmcodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjY2Vzc1Rva2VuSHR0cENsaWVudC5qcy5tYXAiXSwibmFtZXMiOlsiSGVhZGVyTmFtZXMiLCJIdHRwQ2xpZW50IiwiQWNjZXNzVG9rZW5IdHRwQ2xpZW50IiwiY29uc3RydWN0b3IiLCJpbm5lckNsaWVudCIsImFjY2Vzc1Rva2VuRmFjdG9yeSIsIl9pbm5lckNsaWVudCIsIl9hY2Nlc3NUb2tlbkZhY3RvcnkiLCJzZW5kIiwicmVxdWVzdCIsImFsbG93UmV0cnkiLCJfYWNjZXNzVG9rZW4iLCJ1cmwiLCJpbmRleE9mIiwiX3NldEF1dGhvcml6YXRpb25IZWFkZXIiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImdldENvb2tpZVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/AccessTokenHttpClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultHttpClient: () => (/* binding */ DefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _Errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\");\n/* harmony import */ var _FetchHttpClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FetchHttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js\");\n/* harmony import */ var _HttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n/* harmony import */ var _XhrHttpClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./XhrHttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */ class DefaultHttpClient extends _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpClient {\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */ constructor(logger){\n        super();\n        if (typeof fetch !== \"undefined\" || _Utils__WEBPACK_IMPORTED_MODULE_1__.Platform.isNode) {\n            this._httpClient = new _FetchHttpClient__WEBPACK_IMPORTED_MODULE_2__.FetchHttpClient(logger);\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\n            this._httpClient = new _XhrHttpClient__WEBPACK_IMPORTED_MODULE_3__.XhrHttpClient(logger);\n        } else {\n            throw new Error(\"No usable HttpClient found.\");\n        }\n    }\n    /** @inheritDoc */ send(request) {\n        // Check that abort was not signaled before calling send\n        if (request.abortSignal && request.abortSignal.aborted) {\n            return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_4__.AbortError());\n        }\n        if (!request.method) {\n            return Promise.reject(new Error(\"No method defined.\"));\n        }\n        if (!request.url) {\n            return Promise.reject(new Error(\"No url defined.\"));\n        }\n        return this._httpClient.send(request);\n    }\n    getCookieString(url) {\n        return this._httpClient.getCookieString(url);\n    }\n} //# sourceMappingURL=DefaultHttpClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0RlZmF1bHRIdHRwQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLGdFQUFnRTtBQUNoRSx1RUFBdUU7QUFDakM7QUFDYztBQUNWO0FBQ1A7QUFDYTtBQUNoRCxxRUFBcUUsR0FDOUQsTUFBTUssMEJBQTBCSCxtREFBVUE7SUFDN0MsdUpBQXVKLEdBQ3ZKSSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSztRQUNMLElBQUksT0FBT0MsVUFBVSxlQUFlTCw0Q0FBUUEsQ0FBQ00sTUFBTSxFQUFFO1lBQ2pELElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlULDZEQUFlQSxDQUFDTTtRQUMzQyxPQUNLLElBQUksT0FBT0ksbUJBQW1CLGFBQWE7WUFDNUMsSUFBSSxDQUFDRCxXQUFXLEdBQUcsSUFBSU4seURBQWFBLENBQUNHO1FBQ3pDLE9BQ0s7WUFDRCxNQUFNLElBQUlLLE1BQU07UUFDcEI7SUFDSjtJQUNBLGdCQUFnQixHQUNoQkMsS0FBS0MsT0FBTyxFQUFFO1FBQ1Ysd0RBQXdEO1FBQ3hELElBQUlBLFFBQVFDLFdBQVcsSUFBSUQsUUFBUUMsV0FBVyxDQUFDQyxPQUFPLEVBQUU7WUFDcEQsT0FBT0MsUUFBUUMsTUFBTSxDQUFDLElBQUlsQiwrQ0FBVUE7UUFDeEM7UUFDQSxJQUFJLENBQUNjLFFBQVFLLE1BQU0sRUFBRTtZQUNqQixPQUFPRixRQUFRQyxNQUFNLENBQUMsSUFBSU4sTUFBTTtRQUNwQztRQUNBLElBQUksQ0FBQ0UsUUFBUU0sR0FBRyxFQUFFO1lBQ2QsT0FBT0gsUUFBUUMsTUFBTSxDQUFDLElBQUlOLE1BQU07UUFDcEM7UUFDQSxPQUFPLElBQUksQ0FBQ0YsV0FBVyxDQUFDRyxJQUFJLENBQUNDO0lBQ2pDO0lBQ0FPLGdCQUFnQkQsR0FBRyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDVixXQUFXLENBQUNXLGVBQWUsQ0FBQ0Q7SUFDNUM7QUFDSixFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1zb2NrZXRzLWNoYXQtY2xpZW50LWFwcC8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9lc20vRGVmYXVsdEh0dHBDbGllbnQuanM/MmZlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgLk5FVCBGb3VuZGF0aW9uIHVuZGVyIG9uZSBvciBtb3JlIGFncmVlbWVudHMuXHJcbi8vIFRoZSAuTkVUIEZvdW5kYXRpb24gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbmltcG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiLi9FcnJvcnNcIjtcclxuaW1wb3J0IHsgRmV0Y2hIdHRwQ2xpZW50IH0gZnJvbSBcIi4vRmV0Y2hIdHRwQ2xpZW50XCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiLi9IdHRwQ2xpZW50XCI7XHJcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuaW1wb3J0IHsgWGhySHR0cENsaWVudCB9IGZyb20gXCIuL1hockh0dHBDbGllbnRcIjtcclxuLyoqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdHRwQ2xpZW50fS4gKi9cclxuZXhwb3J0IGNsYXNzIERlZmF1bHRIdHRwQ2xpZW50IGV4dGVuZHMgSHR0cENsaWVudCB7XHJcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5EZWZhdWx0SHR0cENsaWVudH0sIHVzaW5nIHRoZSBwcm92aWRlZCB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLklMb2dnZXJ9IHRvIGxvZyBtZXNzYWdlcy4gKi9cclxuICAgIGNvbnN0cnVjdG9yKGxvZ2dlcikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmZXRjaCAhPT0gXCJ1bmRlZmluZWRcIiB8fCBQbGF0Zm9ybS5pc05vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5faHR0cENsaWVudCA9IG5ldyBGZXRjaEh0dHBDbGllbnQobG9nZ2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2h0dHBDbGllbnQgPSBuZXcgWGhySHR0cENsaWVudChsb2dnZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdXNhYmxlIEh0dHBDbGllbnQgZm91bmQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgc2VuZChyZXF1ZXN0KSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBhYm9ydCB3YXMgbm90IHNpZ25hbGVkIGJlZm9yZSBjYWxsaW5nIHNlbmRcclxuICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBBYm9ydEVycm9yKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3QubWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBtZXRob2QgZGVmaW5lZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3QudXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyB1cmwgZGVmaW5lZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cENsaWVudC5zZW5kKHJlcXVlc3QpO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29va2llU3RyaW5nKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlZmF1bHRIdHRwQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJBYm9ydEVycm9yIiwiRmV0Y2hIdHRwQ2xpZW50IiwiSHR0cENsaWVudCIsIlBsYXRmb3JtIiwiWGhySHR0cENsaWVudCIsIkRlZmF1bHRIdHRwQ2xpZW50IiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJmZXRjaCIsImlzTm9kZSIsIl9odHRwQ2xpZW50IiwiWE1MSHR0cFJlcXVlc3QiLCJFcnJvciIsInNlbmQiLCJyZXF1ZXN0IiwiYWJvcnRTaWduYWwiLCJhYm9ydGVkIiwiUHJvbWlzZSIsInJlamVjdCIsIm1ldGhvZCIsInVybCIsImdldENvb2tpZVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultReconnectPolicy: () => (/* binding */ DefaultReconnectPolicy)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// 0, 2, 10, 30 second delays before reconnect attempts.\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [\n    0,\n    2000,\n    10000,\n    30000,\n    null\n];\n/** @private */ class DefaultReconnectPolicy {\n    constructor(retryDelays){\n        this._retryDelays = retryDelays !== undefined ? [\n            ...retryDelays,\n            null\n        ] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\n    }\n    nextRetryDelayInMilliseconds(retryContext) {\n        return this._retryDelays[retryContext.previousRetryCount];\n    }\n} //# sourceMappingURL=DefaultReconnectPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGdFQUFnRTtBQUNoRSx1RUFBdUU7QUFDdkUsd0RBQXdEO0FBQ3hELE1BQU1BLHVDQUF1QztJQUFDO0lBQUc7SUFBTTtJQUFPO0lBQU87Q0FBSztBQUMxRSxhQUFhLEdBQ04sTUFBTUM7SUFDVEMsWUFBWUMsV0FBVyxDQUFFO1FBQ3JCLElBQUksQ0FBQ0MsWUFBWSxHQUFHRCxnQkFBZ0JFLFlBQVk7ZUFBSUY7WUFBYTtTQUFLLEdBQUdIO0lBQzdFO0lBQ0FNLDZCQUE2QkMsWUFBWSxFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDSCxZQUFZLENBQUNHLGFBQWFDLGtCQUFrQixDQUFDO0lBQzdEO0FBQ0osRUFDQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItc29ja2V0cy1jaGF0LWNsaWVudC1hcHAvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3kuanM/Nzc0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgLk5FVCBGb3VuZGF0aW9uIHVuZGVyIG9uZSBvciBtb3JlIGFncmVlbWVudHMuXHJcbi8vIFRoZSAuTkVUIEZvdW5kYXRpb24gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbi8vIDAsIDIsIDEwLCAzMCBzZWNvbmQgZGVsYXlzIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdHMuXHJcbmNvbnN0IERFRkFVTFRfUkVUUllfREVMQVlTX0lOX01JTExJU0VDT05EUyA9IFswLCAyMDAwLCAxMDAwMCwgMzAwMDAsIG51bGxdO1xyXG4vKiogQHByaXZhdGUgKi9cclxuZXhwb3J0IGNsYXNzIERlZmF1bHRSZWNvbm5lY3RQb2xpY3kge1xyXG4gICAgY29uc3RydWN0b3IocmV0cnlEZWxheXMpIHtcclxuICAgICAgICB0aGlzLl9yZXRyeURlbGF5cyA9IHJldHJ5RGVsYXlzICE9PSB1bmRlZmluZWQgPyBbLi4ucmV0cnlEZWxheXMsIG51bGxdIDogREVGQVVMVF9SRVRSWV9ERUxBWVNfSU5fTUlMTElTRUNPTkRTO1xyXG4gICAgfVxyXG4gICAgbmV4dFJldHJ5RGVsYXlJbk1pbGxpc2Vjb25kcyhyZXRyeUNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmV0cnlEZWxheXNbcmV0cnlDb250ZXh0LnByZXZpb3VzUmV0cnlDb3VudF07XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdFJlY29ubmVjdFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsiREVGQVVMVF9SRVRSWV9ERUxBWVNfSU5fTUlMTElTRUNPTkRTIiwiRGVmYXVsdFJlY29ubmVjdFBvbGljeSIsImNvbnN0cnVjdG9yIiwicmV0cnlEZWxheXMiLCJfcmV0cnlEZWxheXMiLCJ1bmRlZmluZWQiLCJuZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzIiwicmV0cnlDb250ZXh0IiwicHJldmlvdXNSZXRyeUNvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/DynamicImports.js":
/*!********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/DynamicImports.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   configureAbortController: () => (/* binding */ configureAbortController),\n/* harmony export */   configureFetch: () => (/* binding */ configureFetch),\n/* harmony export */   getEventSource: () => (/* binding */ getEventSource),\n/* harmony export */   getWS: () => (/* binding */ getWS)\n/* harmony export */ });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n/** @private */ function configureFetch(obj) {\n    // Node added a fetch implementation to the global scope starting in v18.\n    // We need to add a cookie jar in node to be able to share cookies with WebSocket\n    if (typeof fetch === \"undefined\" || _Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode) {\n        // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        obj._jar = new (__webpack_require__(/*! tough-cookie */ \"(ssr)/./node_modules/tough-cookie/lib/cookie.js\").CookieJar)();\n        if (typeof fetch === \"undefined\") {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            obj._fetchType = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\n        } else {\n            // Use fetch from Node if available\n            obj._fetchType = fetch;\n        }\n        // node-fetch doesn't have a nice API for getting and setting cookies\n        // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        obj._fetchType = __webpack_require__(/*! fetch-cookie */ \"(ssr)/./node_modules/fetch-cookie/cjs/index-wrapper.js\")(obj._fetchType, obj._jar);\n        return true;\n    }\n    return false;\n}\n/** @private */ function configureAbortController(obj) {\n    if (typeof AbortController === \"undefined\") {\n        // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\n        obj._abortControllerType = __webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\");\n        return true;\n    }\n    return false;\n}\n/** @private */ function getWS() {\n    return __webpack_require__(/*! ws */ \"(ssr)/./node_modules/ws/index.js\");\n}\n/** @private */ function getEventSource() {\n    return __webpack_require__(/*! eventsource */ \"(ssr)/./node_modules/eventsource/lib/eventsource.js\");\n} //# sourceMappingURL=DynamicImports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0R5bmFtaWNJbXBvcnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsZ0VBQWdFO0FBQ2hFLHVFQUF1RTtBQUNwQztBQUNuQyxhQUFhLEdBQ04sU0FBU0MsZUFBZUMsR0FBRztJQUM5Qix5RUFBeUU7SUFDekUsaUZBQWlGO0lBQ2pGLElBQUksT0FBT0MsVUFBVSxlQUFlSCw0Q0FBUUEsQ0FBQ0ksTUFBTSxFQUFFO1FBQ2pELGlIQUFpSDtRQUNqSCw4REFBOEQ7UUFDOURGLElBQUlHLElBQUksR0FBRyxJQUFJLHNHQUFtQztRQUNsRCxJQUFJLE9BQU9GLFVBQVUsYUFBYTtZQUM5Qiw4REFBOEQ7WUFDOURELElBQUlNLFVBQVUsR0FBR0YsbUJBQU9BLENBQUMsaUVBQVk7UUFDekMsT0FDSztZQUNELG1DQUFtQztZQUNuQ0osSUFBSU0sVUFBVSxHQUFHTDtRQUNyQjtRQUNBLHFFQUFxRTtRQUNyRSwyRkFBMkY7UUFDM0YsOERBQThEO1FBQzlERCxJQUFJTSxVQUFVLEdBQUdGLG1CQUFPQSxDQUFDLDRFQUFjLEVBQUVKLElBQUlNLFVBQVUsRUFBRU4sSUFBSUcsSUFBSTtRQUNqRSxPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDQSxhQUFhLEdBQ04sU0FBU0kseUJBQXlCUCxHQUFHO0lBQ3hDLElBQUksT0FBT1Esb0JBQW9CLGFBQWE7UUFDeEMsZ0dBQWdHO1FBQ2hHUixJQUFJUyxvQkFBb0IsR0FBR0wsbUJBQU9BLENBQUMsd0ZBQWtCO1FBQ3JELE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNBLGFBQWEsR0FDTixTQUFTTTtJQUNaLE9BQU9OLG1CQUFPQSxDQUFDLDRDQUFJO0FBQ3ZCO0FBQ0EsYUFBYSxHQUNOLFNBQVNPO0lBQ1osT0FBT1AsbUJBQU9BLENBQUMsd0VBQWE7QUFDaEMsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItc29ja2V0cy1jaGF0LWNsaWVudC1hcHAvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0R5bmFtaWNJbXBvcnRzLmpzPzQwYWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLlxyXG4vLyBUaGUgLk5FVCBGb3VuZGF0aW9uIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlRmV0Y2gob2JqKSB7XHJcbiAgICAvLyBOb2RlIGFkZGVkIGEgZmV0Y2ggaW1wbGVtZW50YXRpb24gdG8gdGhlIGdsb2JhbCBzY29wZSBzdGFydGluZyBpbiB2MTguXHJcbiAgICAvLyBXZSBuZWVkIHRvIGFkZCBhIGNvb2tpZSBqYXIgaW4gbm9kZSB0byBiZSBhYmxlIHRvIHNoYXJlIGNvb2tpZXMgd2l0aCBXZWJTb2NrZXRcclxuICAgIGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIgfHwgUGxhdGZvcm0uaXNOb2RlKSB7XHJcbiAgICAgICAgLy8gQ29va2llcyBhcmVuJ3QgYXV0b21hdGljYWxseSBoYW5kbGVkIGluIE5vZGUgc28gd2UgbmVlZCB0byBhZGQgYSBDb29raWVKYXIgdG8gcHJlc2VydmUgY29va2llcyBhY3Jvc3MgcmVxdWVzdHNcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xyXG4gICAgICAgIG9iai5famFyID0gbmV3IChyZXF1aXJlKFwidG91Z2gtY29va2llXCIpKS5Db29raWVKYXIoKTtcclxuICAgICAgICBpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXHJcbiAgICAgICAgICAgIG9iai5fZmV0Y2hUeXBlID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBVc2UgZmV0Y2ggZnJvbSBOb2RlIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgICAgICBvYmouX2ZldGNoVHlwZSA9IGZldGNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBub2RlLWZldGNoIGRvZXNuJ3QgaGF2ZSBhIG5pY2UgQVBJIGZvciBnZXR0aW5nIGFuZCBzZXR0aW5nIGNvb2tpZXNcclxuICAgICAgICAvLyBmZXRjaC1jb29raWUgd2lsbCB3cmFwIGEgZmV0Y2ggaW1wbGVtZW50YXRpb24gd2l0aCBhIGRlZmF1bHQgQ29va2llSmFyIG9yIGEgcHJvdmlkZWQgb25lXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcclxuICAgICAgICBvYmouX2ZldGNoVHlwZSA9IHJlcXVpcmUoXCJmZXRjaC1jb29raWVcIikob2JqLl9mZXRjaFR5cGUsIG9iai5famFyKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vKiogQHByaXZhdGUgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZUFib3J0Q29udHJvbGxlcihvYmopIHtcclxuICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgLy8gTm9kZSBuZWVkcyBFdmVudExpc3RlbmVyIG1ldGhvZHMgb24gQWJvcnRDb250cm9sbGVyIHdoaWNoIG91ciBjdXN0b20gcG9seWZpbGwgZG9lc24ndCBwcm92aWRlXHJcbiAgICAgICAgb2JqLl9hYm9ydENvbnRyb2xsZXJUeXBlID0gcmVxdWlyZShcImFib3J0LWNvbnRyb2xsZXJcIik7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXUygpIHtcclxuICAgIHJldHVybiByZXF1aXJlKFwid3NcIik7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudFNvdXJjZSgpIHtcclxuICAgIHJldHVybiByZXF1aXJlKFwiZXZlbnRzb3VyY2VcIik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHluYW1pY0ltcG9ydHMuanMubWFwIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwiY29uZmlndXJlRmV0Y2giLCJvYmoiLCJmZXRjaCIsImlzTm9kZSIsIl9qYXIiLCJyZXF1aXJlIiwiQ29va2llSmFyIiwiX2ZldGNoVHlwZSIsImNvbmZpZ3VyZUFib3J0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsIl9hYm9ydENvbnRyb2xsZXJUeXBlIiwiZ2V0V1MiLCJnZXRFdmVudFNvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/DynamicImports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js":
/*!************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/Errors.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   AggregateErrors: () => (/* binding */ AggregateErrors),\n/* harmony export */   DisabledTransportError: () => (/* binding */ DisabledTransportError),\n/* harmony export */   FailedToNegotiateWithServerError: () => (/* binding */ FailedToNegotiateWithServerError),\n/* harmony export */   FailedToStartTransportError: () => (/* binding */ FailedToStartTransportError),\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   UnsupportedTransportError: () => (/* binding */ UnsupportedTransportError)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n/** Error thrown when an HTTP request fails. */ class HttpError extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */ constructor(errorMessage, statusCode){\n        const trueProto = new.target.prototype;\n        super(`${errorMessage}: Status code '${statusCode}'`);\n        this.statusCode = statusCode;\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when a timeout elapses. */ class TimeoutError extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */ constructor(errorMessage = \"A timeout occurred.\"){\n        const trueProto = new.target.prototype;\n        super(errorMessage);\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when an action is aborted. */ class AbortError extends Error {\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */ constructor(errorMessage = \"An abort occurred.\"){\n        const trueProto = new.target.prototype;\n        super(errorMessage);\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when the selected transport is unsupported by the browser. */ /** @private */ class UnsupportedTransportError extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */ constructor(message, transport){\n        const trueProto = new.target.prototype;\n        super(message);\n        this.transport = transport;\n        this.errorType = \"UnsupportedTransportError\";\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when the selected transport is disabled by the browser. */ /** @private */ class DisabledTransportError extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */ constructor(message, transport){\n        const trueProto = new.target.prototype;\n        super(message);\n        this.transport = transport;\n        this.errorType = \"DisabledTransportError\";\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when the selected transport cannot be started. */ /** @private */ class FailedToStartTransportError extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */ constructor(message, transport){\n        const trueProto = new.target.prototype;\n        super(message);\n        this.transport = transport;\n        this.errorType = \"FailedToStartTransportError\";\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when the negotiation with the server failed to complete. */ /** @private */ class FailedToNegotiateWithServerError extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */ constructor(message){\n        const trueProto = new.target.prototype;\n        super(message);\n        this.errorType = \"FailedToNegotiateWithServerError\";\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n}\n/** Error thrown when multiple errors have occurred. */ /** @private */ class AggregateErrors extends Error {\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */ constructor(message, innerErrors){\n        const trueProto = new.target.prototype;\n        super(message);\n        this.innerErrors = innerErrors;\n        // Workaround issue in Typescript compiler\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n        this.__proto__ = trueProto;\n    }\n} //# sourceMappingURL=Errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchHttpClient: () => (/* binding */ FetchHttpClient)\n/* harmony export */ });\n/* harmony import */ var _Errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\");\n/* harmony import */ var _HttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n/* harmony import */ var _DynamicImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DynamicImports */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/DynamicImports.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\nclass FetchHttpClient extends _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpClient {\n    constructor(logger){\n        super();\n        this._logger = logger;\n        // This is how you do \"reference\" arguments\n        const fetchObj = {\n            _fetchType: undefined,\n            _jar: undefined\n        };\n        if ((0,_DynamicImports__WEBPACK_IMPORTED_MODULE_1__.configureFetch)(fetchObj)) {\n            this._fetchType = fetchObj._fetchType;\n            this._jar = fetchObj._jar;\n        } else {\n            this._fetchType = fetch.bind((0,_Utils__WEBPACK_IMPORTED_MODULE_2__.getGlobalThis)());\n        }\n        this._abortControllerType = AbortController;\n        const abortObj = {\n            _abortControllerType: this._abortControllerType\n        };\n        if ((0,_DynamicImports__WEBPACK_IMPORTED_MODULE_1__.configureAbortController)(abortObj)) {\n            this._abortControllerType = abortObj._abortControllerType;\n        }\n    }\n    /** @inheritDoc */ async send(request) {\n        // Check that abort was not signaled before calling send\n        if (request.abortSignal && request.abortSignal.aborted) {\n            throw new _Errors__WEBPACK_IMPORTED_MODULE_3__.AbortError();\n        }\n        if (!request.method) {\n            throw new Error(\"No method defined.\");\n        }\n        if (!request.url) {\n            throw new Error(\"No url defined.\");\n        }\n        const abortController = new this._abortControllerType();\n        let error;\n        // Hook our abortSignal into the abort controller\n        if (request.abortSignal) {\n            request.abortSignal.onabort = ()=>{\n                abortController.abort();\n                error = new _Errors__WEBPACK_IMPORTED_MODULE_3__.AbortError();\n            };\n        }\n        // If a timeout has been passed in, setup a timeout to call abort\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\n        let timeoutId = null;\n        if (request.timeout) {\n            const msTimeout = request.timeout;\n            timeoutId = setTimeout(()=>{\n                abortController.abort();\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Warning, `Timeout from HTTP request.`);\n                error = new _Errors__WEBPACK_IMPORTED_MODULE_3__.TimeoutError();\n            }, msTimeout);\n        }\n        if (request.content === \"\") {\n            request.content = undefined;\n        }\n        if (request.content) {\n            // Explicitly setting the Content-Type header for React Native on Android platform.\n            request.headers = request.headers || {};\n            if ((0,_Utils__WEBPACK_IMPORTED_MODULE_2__.isArrayBuffer)(request.content)) {\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\n            } else {\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n            }\n        }\n        let response;\n        try {\n            response = await this._fetchType(request.url, {\n                body: request.content,\n                cache: \"no-cache\",\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\",\n                    ...request.headers\n                },\n                method: request.method,\n                mode: \"cors\",\n                redirect: \"follow\",\n                signal: abortController.signal\n            });\n        } catch (e) {\n            if (error) {\n                throw error;\n            }\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Warning, `Error from HTTP request. ${e}.`);\n            throw e;\n        } finally{\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n            if (request.abortSignal) {\n                request.abortSignal.onabort = null;\n            }\n        }\n        if (!response.ok) {\n            const errorMessage = await deserializeContent(response, \"text\");\n            throw new _Errors__WEBPACK_IMPORTED_MODULE_3__.HttpError(errorMessage || response.statusText, response.status);\n        }\n        const content = deserializeContent(response, request.responseType);\n        const payload = await content;\n        return new _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpResponse(response.status, response.statusText, payload);\n    }\n    getCookieString(url) {\n        let cookies = \"\";\n        if (_Utils__WEBPACK_IMPORTED_MODULE_2__.Platform.isNode && this._jar) {\n            // @ts-ignore: unused variable\n            this._jar.getCookies(url, (e, c)=>cookies = c.join(\"; \"));\n        }\n        return cookies;\n    }\n}\nfunction deserializeContent(response, responseType) {\n    let content;\n    switch(responseType){\n        case \"arraybuffer\":\n            content = response.arrayBuffer();\n            break;\n        case \"text\":\n            content = response.text();\n            break;\n        case \"blob\":\n        case \"document\":\n        case \"json\":\n            throw new Error(`${responseType} is not supported.`);\n        default:\n            content = response.text();\n            break;\n    }\n    return content;\n} //# sourceMappingURL=FetchHttpClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HandshakeProtocol: () => (/* binding */ HandshakeProtocol)\n/* harmony export */ });\n/* harmony import */ var _TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TextMessageFormat */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n/** @private */ class HandshakeProtocol {\n    // Handshake request is always JSON\n    writeHandshakeRequest(handshakeRequest) {\n        return _TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__.TextMessageFormat.write(JSON.stringify(handshakeRequest));\n    }\n    parseHandshakeResponse(data) {\n        let messageData;\n        let remainingData;\n        if ((0,_Utils__WEBPACK_IMPORTED_MODULE_1__.isArrayBuffer)(data)) {\n            // Format is binary but still need to read JSON text from handshake response\n            const binaryData = new Uint8Array(data);\n            const separatorIndex = binaryData.indexOf(_TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__.TextMessageFormat.RecordSeparatorCode);\n            if (separatorIndex === -1) {\n                throw new Error(\"Message is incomplete.\");\n            }\n            // content before separator is handshake response\n            // optional content after is additional messages\n            const responseLength = separatorIndex + 1;\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\n            remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n        } else {\n            const textData = data;\n            const separatorIndex = textData.indexOf(_TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__.TextMessageFormat.RecordSeparator);\n            if (separatorIndex === -1) {\n                throw new Error(\"Message is incomplete.\");\n            }\n            // content before separator is handshake response\n            // optional content after is additional messages\n            const responseLength = separatorIndex + 1;\n            messageData = textData.substring(0, responseLength);\n            remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n        }\n        // At this point we should have just the single handshake message\n        const messages = _TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__.TextMessageFormat.parse(messageData);\n        const response = JSON.parse(messages[0]);\n        if (response.type) {\n            throw new Error(\"Expected a handshake response from the server.\");\n        }\n        const responseMessage = response;\n        // multiple messages could have arrived with handshake\n        // return additional data to be parsed as usual, or null if all parsed\n        return [\n            remainingData,\n            responseMessage\n        ];\n    }\n} //# sourceMappingURL=HandshakeProtocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0hhbmRzaGFrZVByb3RvY29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdFQUFnRTtBQUNoRSx1RUFBdUU7QUFDZjtBQUNoQjtBQUN4QyxhQUFhLEdBQ04sTUFBTUU7SUFDVCxtQ0FBbUM7SUFDbkNDLHNCQUFzQkMsZ0JBQWdCLEVBQUU7UUFDcEMsT0FBT0osaUVBQWlCQSxDQUFDSyxLQUFLLENBQUNDLEtBQUtDLFNBQVMsQ0FBQ0g7SUFDbEQ7SUFDQUksdUJBQXVCQyxJQUFJLEVBQUU7UUFDekIsSUFBSUM7UUFDSixJQUFJQztRQUNKLElBQUlWLHFEQUFhQSxDQUFDUSxPQUFPO1lBQ3JCLDRFQUE0RTtZQUM1RSxNQUFNRyxhQUFhLElBQUlDLFdBQVdKO1lBQ2xDLE1BQU1LLGlCQUFpQkYsV0FBV0csT0FBTyxDQUFDZixpRUFBaUJBLENBQUNnQixtQkFBbUI7WUFDL0UsSUFBSUYsbUJBQW1CLENBQUMsR0FBRztnQkFDdkIsTUFBTSxJQUFJRyxNQUFNO1lBQ3BCO1lBQ0EsaURBQWlEO1lBQ2pELGdEQUFnRDtZQUNoRCxNQUFNQyxpQkFBaUJKLGlCQUFpQjtZQUN4Q0osY0FBY1MsT0FBT0MsWUFBWSxDQUFDQyxLQUFLLENBQUMsTUFBTUMsTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ2IsV0FBV1ksS0FBSyxDQUFDLEdBQUdOO1lBQzdGUCxnQkFBZ0IsV0FBWWUsVUFBVSxHQUFHUixpQkFBa0JOLFdBQVdZLEtBQUssQ0FBQ04sZ0JBQWdCUyxNQUFNLEdBQUc7UUFDekcsT0FDSztZQUNELE1BQU1DLFdBQVduQjtZQUNqQixNQUFNSyxpQkFBaUJjLFNBQVNiLE9BQU8sQ0FBQ2YsaUVBQWlCQSxDQUFDNkIsZUFBZTtZQUN6RSxJQUFJZixtQkFBbUIsQ0FBQyxHQUFHO2dCQUN2QixNQUFNLElBQUlHLE1BQU07WUFDcEI7WUFDQSxpREFBaUQ7WUFDakQsZ0RBQWdEO1lBQ2hELE1BQU1DLGlCQUFpQkosaUJBQWlCO1lBQ3hDSixjQUFja0IsU0FBU0UsU0FBUyxDQUFDLEdBQUdaO1lBQ3BDUCxnQkFBZ0IsU0FBVW9CLE1BQU0sR0FBR2IsaUJBQWtCVSxTQUFTRSxTQUFTLENBQUNaLGtCQUFrQjtRQUM5RjtRQUNBLGlFQUFpRTtRQUNqRSxNQUFNYyxXQUFXaEMsaUVBQWlCQSxDQUFDaUMsS0FBSyxDQUFDdkI7UUFDekMsTUFBTXdCLFdBQVc1QixLQUFLMkIsS0FBSyxDQUFDRCxRQUFRLENBQUMsRUFBRTtRQUN2QyxJQUFJRSxTQUFTQyxJQUFJLEVBQUU7WUFDZixNQUFNLElBQUlsQixNQUFNO1FBQ3BCO1FBQ0EsTUFBTW1CLGtCQUFrQkY7UUFDeEIsc0RBQXNEO1FBQ3RELHNFQUFzRTtRQUN0RSxPQUFPO1lBQUN2QjtZQUFleUI7U0FBZ0I7SUFDM0M7QUFDSixFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1zb2NrZXRzLWNoYXQtY2xpZW50LWFwcC8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9lc20vSGFuZHNoYWtlUHJvdG9jb2wuanM/ZTM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgLk5FVCBGb3VuZGF0aW9uIHVuZGVyIG9uZSBvciBtb3JlIGFncmVlbWVudHMuXHJcbi8vIFRoZSAuTkVUIEZvdW5kYXRpb24gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbmltcG9ydCB7IFRleHRNZXNzYWdlRm9ybWF0IH0gZnJvbSBcIi4vVGV4dE1lc3NhZ2VGb3JtYXRcIjtcclxuaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5leHBvcnQgY2xhc3MgSGFuZHNoYWtlUHJvdG9jb2wge1xyXG4gICAgLy8gSGFuZHNoYWtlIHJlcXVlc3QgaXMgYWx3YXlzIEpTT05cclxuICAgIHdyaXRlSGFuZHNoYWtlUmVxdWVzdChoYW5kc2hha2VSZXF1ZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0LndyaXRlKEpTT04uc3RyaW5naWZ5KGhhbmRzaGFrZVJlcXVlc3QpKTtcclxuICAgIH1cclxuICAgIHBhcnNlSGFuZHNoYWtlUmVzcG9uc2UoZGF0YSkge1xyXG4gICAgICAgIGxldCBtZXNzYWdlRGF0YTtcclxuICAgICAgICBsZXQgcmVtYWluaW5nRGF0YTtcclxuICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkge1xyXG4gICAgICAgICAgICAvLyBGb3JtYXQgaXMgYmluYXJ5IGJ1dCBzdGlsbCBuZWVkIHRvIHJlYWQgSlNPTiB0ZXh0IGZyb20gaGFuZHNoYWtlIHJlc3BvbnNlXHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmFyeURhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBiaW5hcnlEYXRhLmluZGV4T2YoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XHJcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29udGVudCBiZWZvcmUgc2VwYXJhdG9yIGlzIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICAvLyBvcHRpb25hbCBjb250ZW50IGFmdGVyIGlzIGFkZGl0aW9uYWwgbWVzc2FnZXNcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VMZW5ndGggPSBzZXBhcmF0b3JJbmRleCArIDE7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChiaW5hcnlEYXRhLnNsaWNlKDAsIHJlc3BvbnNlTGVuZ3RoKSkpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdEYXRhID0gKGJpbmFyeURhdGEuYnl0ZUxlbmd0aCA+IHJlc3BvbnNlTGVuZ3RoKSA/IGJpbmFyeURhdGEuc2xpY2UocmVzcG9uc2VMZW5ndGgpLmJ1ZmZlciA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0RGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcGFyYXRvckluZGV4ID0gdGV4dERhdGEuaW5kZXhPZihUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGlzIGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnRlbnQgYmVmb3JlIHNlcGFyYXRvciBpcyBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICAgICAgLy8gb3B0aW9uYWwgY29udGVudCBhZnRlciBpcyBhZGRpdGlvbmFsIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlTGVuZ3RoID0gc2VwYXJhdG9ySW5kZXggKyAxO1xyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IHRleHREYXRhLnN1YnN0cmluZygwLCByZXNwb25zZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJlbWFpbmluZ0RhdGEgPSAodGV4dERhdGEubGVuZ3RoID4gcmVzcG9uc2VMZW5ndGgpID8gdGV4dERhdGEuc3Vic3RyaW5nKHJlc3BvbnNlTGVuZ3RoKSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2Ugc2hvdWxkIGhhdmUganVzdCB0aGUgc2luZ2xlIGhhbmRzaGFrZSBtZXNzYWdlXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBUZXh0TWVzc2FnZUZvcm1hdC5wYXJzZShtZXNzYWdlRGF0YSk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKG1lc3NhZ2VzWzBdKTtcclxuICAgICAgICBpZiAocmVzcG9uc2UudHlwZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhIGhhbmRzaGFrZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXNwb25zZU1lc3NhZ2UgPSByZXNwb25zZTtcclxuICAgICAgICAvLyBtdWx0aXBsZSBtZXNzYWdlcyBjb3VsZCBoYXZlIGFycml2ZWQgd2l0aCBoYW5kc2hha2VcclxuICAgICAgICAvLyByZXR1cm4gYWRkaXRpb25hbCBkYXRhIHRvIGJlIHBhcnNlZCBhcyB1c3VhbCwgb3IgbnVsbCBpZiBhbGwgcGFyc2VkXHJcbiAgICAgICAgcmV0dXJuIFtyZW1haW5pbmdEYXRhLCByZXNwb25zZU1lc3NhZ2VdO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhhbmRzaGFrZVByb3RvY29sLmpzLm1hcCJdLCJuYW1lcyI6WyJUZXh0TWVzc2FnZUZvcm1hdCIsImlzQXJyYXlCdWZmZXIiLCJIYW5kc2hha2VQcm90b2NvbCIsIndyaXRlSGFuZHNoYWtlUmVxdWVzdCIsImhhbmRzaGFrZVJlcXVlc3QiLCJ3cml0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZUhhbmRzaGFrZVJlc3BvbnNlIiwiZGF0YSIsIm1lc3NhZ2VEYXRhIiwicmVtYWluaW5nRGF0YSIsImJpbmFyeURhdGEiLCJVaW50OEFycmF5Iiwic2VwYXJhdG9ySW5kZXgiLCJpbmRleE9mIiwiUmVjb3JkU2VwYXJhdG9yQ29kZSIsIkVycm9yIiwicmVzcG9uc2VMZW5ndGgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsInRleHREYXRhIiwiUmVjb3JkU2VwYXJhdG9yIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwibWVzc2FnZXMiLCJwYXJzZSIsInJlc3BvbnNlIiwidHlwZSIsInJlc3BvbnNlTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/HeaderNames.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/HeaderNames.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeaderNames: () => (/* binding */ HeaderNames)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nclass HeaderNames {\n}\nHeaderNames.Authorization = \"Authorization\";\nHeaderNames.Cookie = \"Cookie\"; //# sourceMappingURL=HeaderNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0hlYWRlck5hbWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQ2hFLE1BQU1BO0FBQ2I7QUFDQUEsWUFBWUMsYUFBYSxHQUFHO0FBQzVCRCxZQUFZRSxNQUFNLEdBQUcsVUFDckIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLXNvY2tldHMtY2hhdC1jbGllbnQtYXBwLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2VzbS9IZWFkZXJOYW1lcy5qcz9lNTdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSAuTkVUIEZvdW5kYXRpb24gdW5kZXIgb25lIG9yIG1vcmUgYWdyZWVtZW50cy5cclxuLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuZXhwb3J0IGNsYXNzIEhlYWRlck5hbWVzIHtcclxufVxyXG5IZWFkZXJOYW1lcy5BdXRob3JpemF0aW9uID0gXCJBdXRob3JpemF0aW9uXCI7XHJcbkhlYWRlck5hbWVzLkNvb2tpZSA9IFwiQ29va2llXCI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhlYWRlck5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJIZWFkZXJOYW1lcyIsIkF1dGhvcml6YXRpb24iLCJDb29raWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/HeaderNames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js":
/*!****************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/HttpClient.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   HttpResponse: () => (/* binding */ HttpResponse)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n/** Represents an HTTP response. */ class HttpResponse {\n    constructor(statusCode, statusText, content){\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n        this.content = content;\n    }\n}\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */ class HttpClient {\n    get(url, options) {\n        return this.send({\n            ...options,\n            method: \"GET\",\n            url\n        });\n    }\n    post(url, options) {\n        return this.send({\n            ...options,\n            method: \"POST\",\n            url\n        });\n    }\n    delete(url, options) {\n        return this.send({\n            ...options,\n            method: \"DELETE\",\n            url\n        });\n    }\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */ // @ts-ignore\n    getCookieString(url) {\n        return \"\";\n    }\n} //# sourceMappingURL=HttpClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0h0dHBDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQ3ZFLGlDQUFpQyxHQUMxQixNQUFNQTtJQUNUQyxZQUFZQyxVQUFVLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQ3pDLElBQUksQ0FBQ0YsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ25CO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNQztJQUNUQyxJQUFJQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNkLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUM7WUFDYixHQUFHRCxPQUFPO1lBQ1ZFLFFBQVE7WUFDUkg7UUFDSjtJQUNKO0lBQ0FJLEtBQUtKLEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQztZQUNiLEdBQUdELE9BQU87WUFDVkUsUUFBUTtZQUNSSDtRQUNKO0lBQ0o7SUFDQUssT0FBT0wsR0FBRyxFQUFFQyxPQUFPLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQztZQUNiLEdBQUdELE9BQU87WUFDVkUsUUFBUTtZQUNSSDtRQUNKO0lBQ0o7SUFDQTs7OztLQUlDLEdBQ0QsYUFBYTtJQUNiTSxnQkFBZ0JOLEdBQUcsRUFBRTtRQUNqQixPQUFPO0lBQ1g7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1zb2NrZXRzLWNoYXQtY2xpZW50LWFwcC8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9lc20vSHR0cENsaWVudC5qcz8yZTNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSAuTkVUIEZvdW5kYXRpb24gdW5kZXIgb25lIG9yIG1vcmUgYWdyZWVtZW50cy5cclxuLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuLyoqIFJlcHJlc2VudHMgYW4gSFRUUCByZXNwb25zZS4gKi9cclxuZXhwb3J0IGNsYXNzIEh0dHBSZXNwb25zZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzdGF0dXNDb2RlLCBzdGF0dXNUZXh0LCBjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcclxuICAgICAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0O1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuLyoqIEFic3RyYWN0aW9uIG92ZXIgYW4gSFRUUCBjbGllbnQuXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgYW4gYWJzdHJhY3Rpb24gb3ZlciBhbiBIVFRQIGNsaWVudCBzbyB0aGF0IGEgZGlmZmVyZW50IGltcGxlbWVudGF0aW9uIGNhbiBiZSBwcm92aWRlZCBvbiBkaWZmZXJlbnQgcGxhdGZvcm1zLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEh0dHBDbGllbnQge1xyXG4gICAgZ2V0KHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoe1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIHVybCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHBvc3QodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIHVybCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHtcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKiogR2V0cyBhbGwgY29va2llcyB0aGF0IGFwcGx5IHRvIHRoZSBzcGVjaWZpZWQgVVJMLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cmwgVGhlIFVSTCB0aGF0IHRoZSBjb29raWVzIGFyZSB2YWxpZCBmb3IuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBjb250YWluaW5nIGFsbCB0aGUga2V5LXZhbHVlIGNvb2tpZSBwYWlycyBmb3IgdGhlIHNwZWNpZmllZCBVUkwuXHJcbiAgICAgKi9cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGdldENvb2tpZVN0cmluZyh1cmwpIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJIdHRwUmVzcG9uc2UiLCJjb25zdHJ1Y3RvciIsInN0YXR1c0NvZGUiLCJzdGF0dXNUZXh0IiwiY29udGVudCIsIkh0dHBDbGllbnQiLCJnZXQiLCJ1cmwiLCJvcHRpb25zIiwic2VuZCIsIm1ldGhvZCIsInBvc3QiLCJkZWxldGUiLCJnZXRDb29raWVTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpConnection.js":
/*!********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/HttpConnection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: () => (/* binding */ HttpConnection),\n/* harmony export */   TransportSendQueue: () => (/* binding */ TransportSendQueue)\n/* harmony export */ });\n/* harmony import */ var _AccessTokenHttpClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AccessTokenHttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/AccessTokenHttpClient.js\");\n/* harmony import */ var _DefaultHttpClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DefaultHttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js\");\n/* harmony import */ var _DynamicImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DynamicImports */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/DynamicImports.js\");\n/* harmony import */ var _Errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _ITransport__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ITransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js\");\n/* harmony import */ var _LongPollingTransport__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./LongPollingTransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js\");\n/* harmony import */ var _ServerSentEventsTransport__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ServerSentEventsTransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n/* harmony import */ var _WebSocketTransport__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./WebSocketTransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\n\n\n\n\n\nconst MAX_REDIRECTS = 100;\n/** @private */ class HttpConnection {\n    constructor(url, options = {}){\n        this._stopPromiseResolver = ()=>{};\n        this.features = {};\n        this._negotiateVersion = 1;\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isRequired(url, \"url\");\n        this._logger = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.createLogger)(options.logger);\n        this.baseUrl = this._resolveUrl(url);\n        options = options || {};\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n        } else {\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n        }\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n        let webSocketModule = null;\n        let eventSourceModule = null;\n        if (_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode && \"function\" !== \"undefined\") {\n            webSocketModule = (0,_DynamicImports__WEBPACK_IMPORTED_MODULE_1__.getWS)();\n            eventSourceModule = (0,_DynamicImports__WEBPACK_IMPORTED_MODULE_1__.getEventSource)();\n        }\n        if (!_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n            options.WebSocket = WebSocket;\n        } else if (_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode && !options.WebSocket) {\n            if (webSocketModule) {\n                options.WebSocket = webSocketModule;\n            }\n        }\n        if (!_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n            options.EventSource = EventSource;\n        } else if (_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode && !options.EventSource) {\n            if (typeof eventSourceModule !== \"undefined\") {\n                options.EventSource = eventSourceModule;\n            }\n        }\n        this._httpClient = new _AccessTokenHttpClient__WEBPACK_IMPORTED_MODULE_2__.AccessTokenHttpClient(options.httpClient || new _DefaultHttpClient__WEBPACK_IMPORTED_MODULE_3__.DefaultHttpClient(this._logger), options.accessTokenFactory);\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */ ;\n        this._connectionStarted = false;\n        this._options = options;\n        this.onreceive = null;\n        this.onclose = null;\n    }\n    async start(transferFormat) {\n        transferFormat = transferFormat || _ITransport__WEBPACK_IMPORTED_MODULE_4__.TransferFormat.Binary;\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isIn(transferFormat, _ITransport__WEBPACK_IMPORTED_MODULE_4__.TransferFormat, \"transferFormat\");\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Starting connection with transfer format '${_ITransport__WEBPACK_IMPORTED_MODULE_4__.TransferFormat[transferFormat]}'.`);\n        if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */ ) {\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n        }\n        this._connectionState = \"Connecting\" /* ConnectionState.Connecting */ ;\n        this._startInternalPromise = this._startInternal(transferFormat);\n        await this._startInternalPromise;\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ ) {\n            // stop() was called and transitioned the client into the Disconnecting state.\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, message);\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n            await this._stopPromise;\n            return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_6__.AbortError(message));\n        } else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */ ) {\n            // stop() was called and transitioned the client into the Disconnecting state.\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, message);\n            return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_6__.AbortError(message));\n        }\n        this._connectionStarted = true;\n    }\n    send(data) {\n        if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */ ) {\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n        }\n        if (!this._sendQueue) {\n            this._sendQueue = new TransportSendQueue(this.transport);\n        }\n        // Transport will not be null if state is connected\n        return this._sendQueue.send(data);\n    }\n    async stop(error) {\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */ ) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n            return Promise.resolve();\n        }\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ ) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n            return this._stopPromise;\n        }\n        this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */ ;\n        this._stopPromise = new Promise((resolve)=>{\n            // Don't complete stop() until stopConnection() completes.\n            this._stopPromiseResolver = resolve;\n        });\n        // stopInternal should never throw so just observe it.\n        await this._stopInternal(error);\n        await this._stopPromise;\n    }\n    async _stopInternal(error) {\n        // Set error as soon as possible otherwise there is a race between\n        // the transport closing and providing an error and the error from a close message\n        // We would prefer the close message error.\n        this._stopError = error;\n        try {\n            await this._startInternalPromise;\n        } catch (e) {\n        // This exception is returned to the user as a rejected Promise from the start method.\n        }\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\n        // stop was called during start() and start() failed.\n        if (this.transport) {\n            try {\n                await this.transport.stop();\n            } catch (e) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n                this._stopConnection();\n            }\n            this.transport = undefined;\n        } else {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n        }\n    }\n    async _startInternal(transferFormat) {\n        // Store the original base url and the access token factory since they may change\n        // as part of negotiating\n        let url = this.baseUrl;\n        this._accessTokenFactory = this._options.accessTokenFactory;\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\n        try {\n            if (this._options.skipNegotiation) {\n                if (this._options.transport === _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.WebSockets) {\n                    // No need to add a connection ID in this case\n                    this.transport = this._constructTransport(_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.WebSockets);\n                    // We should just call connect directly in this case.\n                    // No fallback or negotiate in this case.\n                    await this._startTransport(url, transferFormat);\n                } else {\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n                }\n            } else {\n                let negotiateResponse = null;\n                let redirects = 0;\n                do {\n                    negotiateResponse = await this._getNegotiationResponse(url);\n                    // the user tries to stop the connection when it is being started\n                    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */  || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */ ) {\n                        throw new _Errors__WEBPACK_IMPORTED_MODULE_6__.AbortError(\"The connection was stopped during negotiation.\");\n                    }\n                    if (negotiateResponse.error) {\n                        throw new Error(negotiateResponse.error);\n                    }\n                    if (negotiateResponse.ProtocolVersion) {\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n                    }\n                    if (negotiateResponse.url) {\n                        url = negotiateResponse.url;\n                    }\n                    if (negotiateResponse.accessToken) {\n                        // Replace the current access token factory with one that uses\n                        // the returned access token\n                        const accessToken = negotiateResponse.accessToken;\n                        this._accessTokenFactory = ()=>accessToken;\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\n                        this._httpClient._accessToken = accessToken;\n                        this._httpClient._accessTokenFactory = undefined;\n                    }\n                    redirects++;\n                }while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\n                }\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\n            }\n            if (this.transport instanceof _LongPollingTransport__WEBPACK_IMPORTED_MODULE_7__.LongPollingTransport) {\n                this.features.inherentKeepAlive = true;\n            }\n            if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */ ) {\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, \"The HttpConnection connected successfully.\");\n                this._connectionState = \"Connected\" /* ConnectionState.Connected */ ;\n            }\n        // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n        // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n        // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n        } catch (e) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, \"Failed to start the connection: \" + e);\n            this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */ ;\n            this.transport = undefined;\n            // if start fails, any active calls to stop assume that start will complete the stop promise\n            this._stopPromiseResolver();\n            return Promise.reject(e);\n        }\n    }\n    async _getNegotiationResponse(url) {\n        const headers = {};\n        const [name, value] = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeader)();\n        headers[name] = value;\n        const negotiateUrl = this._resolveNegotiateUrl(url);\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n        try {\n            const response = await this._httpClient.post(negotiateUrl, {\n                content: \"\",\n                headers: {\n                    ...headers,\n                    ...this._options.headers\n                },\n                timeout: this._options.timeout,\n                withCredentials: this._options.withCredentials\n            });\n            if (response.statusCode !== 200) {\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n            }\n            const negotiateResponse = JSON.parse(response.content);\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n                // Negotiate version 0 doesn't use connectionToken\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\n            }\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\n                return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_6__.FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\n            }\n            return negotiateResponse;\n        } catch (e) {\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n            if (e instanceof _Errors__WEBPACK_IMPORTED_MODULE_6__.HttpError) {\n                if (e.statusCode === 404) {\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n                }\n            }\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, errorMessage);\n            return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_6__.FailedToNegotiateWithServerError(errorMessage));\n        }\n    }\n    _createConnectUrl(url, connectionToken) {\n        if (!connectionToken) {\n            return url;\n        }\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n    }\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\n        if (this._isITransport(requestedTransport)) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n            this.transport = requestedTransport;\n            await this._startTransport(connectUrl, requestedTransferFormat);\n            this.connectionId = negotiateResponse.connectionId;\n            return;\n        }\n        const transportExceptions = [];\n        const transports = negotiateResponse.availableTransports || [];\n        let negotiate = negotiateResponse;\n        for (const endpoint of transports){\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\n            if (transportOrError instanceof Error) {\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\n                transportExceptions.push(`${endpoint.transport} failed:`);\n                transportExceptions.push(transportOrError);\n            } else if (this._isITransport(transportOrError)) {\n                this.transport = transportOrError;\n                if (!negotiate) {\n                    try {\n                        negotiate = await this._getNegotiationResponse(url);\n                    } catch (ex) {\n                        return Promise.reject(ex);\n                    }\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\n                }\n                try {\n                    await this._startTransport(connectUrl, requestedTransferFormat);\n                    this.connectionId = negotiate.connectionId;\n                    return;\n                } catch (ex) {\n                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n                    negotiate = undefined;\n                    transportExceptions.push(new _Errors__WEBPACK_IMPORTED_MODULE_6__.FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[endpoint.transport]));\n                    if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */ ) {\n                        const message = \"Failed to select transport before stop() was called.\";\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, message);\n                        return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_6__.AbortError(message));\n                    }\n                }\n            }\n        }\n        if (transportExceptions.length > 0) {\n            return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_6__.AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n        }\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n    }\n    _constructTransport(transport) {\n        switch(transport){\n            case _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.WebSockets:\n                if (!this._options.WebSocket) {\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\n                }\n                return new _WebSocketTransport__WEBPACK_IMPORTED_MODULE_8__.WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n            case _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.ServerSentEvents:\n                if (!this._options.EventSource) {\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\n                }\n                return new _ServerSentEventsTransport__WEBPACK_IMPORTED_MODULE_9__.ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\n            case _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.LongPolling:\n                return new _LongPollingTransport__WEBPACK_IMPORTED_MODULE_7__.LongPollingTransport(this._httpClient, this._logger, this._options);\n            default:\n                throw new Error(`Unknown transport: ${transport}.`);\n        }\n    }\n    _startTransport(url, transferFormat) {\n        this.transport.onreceive = this.onreceive;\n        if (this.features.reconnect) {\n            this.transport.onclose = async (e)=>{\n                let callStop = false;\n                if (this.features.reconnect) {\n                    try {\n                        this.features.disconnected();\n                        await this.transport.connect(url, transferFormat);\n                        await this.features.resend();\n                    } catch  {\n                        callStop = true;\n                    }\n                } else {\n                    this._stopConnection(e);\n                    return;\n                }\n                if (callStop) {\n                    this._stopConnection(e);\n                }\n            };\n        } else {\n            this.transport.onclose = (e)=>this._stopConnection(e);\n        }\n        return this.transport.connect(url, transferFormat);\n    }\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\n        const transport = _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[endpoint.transport];\n        if (transport === null || transport === undefined) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n        } else {\n            if (transportMatches(requestedTransport, transport)) {\n                const transferFormats = endpoint.transferFormats.map((s)=>_ITransport__WEBPACK_IMPORTED_MODULE_4__.TransferFormat[s]);\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n                    if (transport === _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.WebSockets && !this._options.WebSocket || transport === _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Skipping transport '${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}' because it is not supported in your environment.'`);\n                        return new _Errors__WEBPACK_IMPORTED_MODULE_6__.UnsupportedTransportError(`'${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}' is not supported in your environment.`, transport);\n                    } else {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Selecting transport '${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}'.`);\n                        try {\n                            this.features.reconnect = transport === _ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\n                            return this._constructTransport(transport);\n                        } catch (ex) {\n                            return ex;\n                        }\n                    }\n                } else {\n                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Skipping transport '${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}' because it does not support the requested transfer format '${_ITransport__WEBPACK_IMPORTED_MODULE_4__.TransferFormat[requestedTransferFormat]}'.`);\n                    return new Error(`'${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}' does not support ${_ITransport__WEBPACK_IMPORTED_MODULE_4__.TransferFormat[requestedTransferFormat]}.`);\n                }\n            } else {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Skipping transport '${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}' because it was disabled by the client.`);\n                return new _Errors__WEBPACK_IMPORTED_MODULE_6__.DisabledTransportError(`'${_ITransport__WEBPACK_IMPORTED_MODULE_4__.HttpTransportType[transport]}' is disabled by the client.`, transport);\n            }\n        }\n    }\n    _isITransport(transport) {\n        return transport && typeof transport === \"object\" && \"connect\" in transport;\n    }\n    _stopConnection(error) {\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n        this.transport = undefined;\n        // If we have a stopError, it takes precedence over the error from the transport\n        error = this._stopError || error;\n        this._stopError = undefined;\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */ ) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n            return;\n        }\n        if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */ ) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n        }\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ ) {\n            // A call to stop() induced this call to stopConnection and needs to be completed.\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n            this._stopPromiseResolver();\n        }\n        if (error) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, `Connection disconnected with error '${error}'.`);\n        } else {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Information, \"Connection disconnected.\");\n        }\n        if (this._sendQueue) {\n            this._sendQueue.stop().catch((e)=>{\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n            });\n            this._sendQueue = undefined;\n        }\n        this.connectionId = undefined;\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */ ;\n        if (this._connectionStarted) {\n            this._connectionStarted = false;\n            try {\n                if (this.onclose) {\n                    this.onclose(error);\n                }\n            } catch (e) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n            }\n        }\n    }\n    _resolveUrl(url) {\n        // startsWith is not supported in IE\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n            return url;\n        }\n        if (!_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isBrowser) {\n            throw new Error(`Cannot resolve '${url}'.`);\n        }\n        // Setting the url to the href propery of an anchor tag handles normalization\n        // for us. There are 3 main cases.\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n        const aTag = window.document.createElement(\"a\");\n        aTag.href = url;\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n        return aTag.href;\n    }\n    _resolveNegotiateUrl(url) {\n        const negotiateUrl = new URL(url);\n        if (negotiateUrl.pathname.endsWith(\"/\")) {\n            negotiateUrl.pathname += \"negotiate\";\n        } else {\n            negotiateUrl.pathname += \"/negotiate\";\n        }\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\n        if (!searchParams.has(\"negotiateVersion\")) {\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\n        }\n        if (searchParams.has(\"useStatefulReconnect\")) {\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\n                this._options._useStatefulReconnect = true;\n            }\n        } else if (this._options._useStatefulReconnect === true) {\n            searchParams.append(\"useStatefulReconnect\", \"true\");\n        }\n        negotiateUrl.search = searchParams.toString();\n        return negotiateUrl.toString();\n    }\n}\nfunction transportMatches(requestedTransport, actualTransport) {\n    return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */ class TransportSendQueue {\n    constructor(_transport){\n        this._transport = _transport;\n        this._buffer = [];\n        this._executing = true;\n        this._sendBufferedData = new PromiseSource();\n        this._transportResult = new PromiseSource();\n        this._sendLoopPromise = this._sendLoop();\n    }\n    send(data) {\n        this._bufferData(data);\n        if (!this._transportResult) {\n            this._transportResult = new PromiseSource();\n        }\n        return this._transportResult.promise;\n    }\n    stop() {\n        this._executing = false;\n        this._sendBufferedData.resolve();\n        return this._sendLoopPromise;\n    }\n    _bufferData(data) {\n        if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n            throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n        }\n        this._buffer.push(data);\n        this._sendBufferedData.resolve();\n    }\n    async _sendLoop() {\n        while(true){\n            await this._sendBufferedData.promise;\n            if (!this._executing) {\n                if (this._transportResult) {\n                    this._transportResult.reject(\"Connection stopped.\");\n                }\n                break;\n            }\n            this._sendBufferedData = new PromiseSource();\n            const transportResult = this._transportResult;\n            this._transportResult = undefined;\n            const data = typeof this._buffer[0] === \"string\" ? this._buffer.join(\"\") : TransportSendQueue._concatBuffers(this._buffer);\n            this._buffer.length = 0;\n            try {\n                await this._transport.send(data);\n                transportResult.resolve();\n            } catch (error) {\n                transportResult.reject(error);\n            }\n        }\n    }\n    static _concatBuffers(arrayBuffers) {\n        const totalLength = arrayBuffers.map((b)=>b.byteLength).reduce((a, b)=>a + b);\n        const result = new Uint8Array(totalLength);\n        let offset = 0;\n        for (const item of arrayBuffers){\n            result.set(new Uint8Array(item), offset);\n            offset += item.byteLength;\n        }\n        return result.buffer;\n    }\n}\nclass PromiseSource {\n    constructor(){\n        this.promise = new Promise((resolve, reject)=>([this._resolver, this._rejecter] = [\n                resolve,\n                reject\n            ]));\n    }\n    resolve() {\n        this._resolver();\n    }\n    reject(reason) {\n        this._rejecter(reason);\n    }\n} //# sourceMappingURL=HttpConnection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpConnection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/HubConnection.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/HubConnection.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HubConnection: () => (/* binding */ HubConnection),\n/* harmony export */   HubConnectionState: () => (/* binding */ HubConnectionState)\n/* harmony export */ });\n/* harmony import */ var _HandshakeProtocol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HandshakeProtocol */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js\");\n/* harmony import */ var _Errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\");\n/* harmony import */ var _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IHubProtocol */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Subject */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Subject.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n/* harmony import */ var _MessageBuffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MessageBuffer */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/MessageBuffer.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\n\n\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100000;\n/** Describes the current state of the {@link HubConnection} to the server. */ var HubConnectionState;\n(function(HubConnectionState) {\n    /** The hub connection is disconnected. */ HubConnectionState[\"Disconnected\"] = \"Disconnected\";\n    /** The hub connection is connecting. */ HubConnectionState[\"Connecting\"] = \"Connecting\";\n    /** The hub connection is connected. */ HubConnectionState[\"Connected\"] = \"Connected\";\n    /** The hub connection is disconnecting. */ HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\n    /** The hub connection is reconnecting. */ HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\n})(HubConnectionState || (HubConnectionState = {}));\n/** Represents a connection to a SignalR Hub. */ class HubConnection {\n    /** @internal */ // Using a public static factory method means we can have a private constructor and an _internal_\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n    // public parameter-less constructor.\n    static create(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\n        return new HubConnection(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\n    }\n    constructor(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize){\n        this._nextKeepAlive = 0;\n        this._freezeEventListener = ()=>{\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\n        };\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(connection, \"connection\");\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(logger, \"logger\");\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(protocol, \"protocol\");\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds !== null && serverTimeoutInMilliseconds !== void 0 ? serverTimeoutInMilliseconds : DEFAULT_TIMEOUT_IN_MS;\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds !== null && keepAliveIntervalInMilliseconds !== void 0 ? keepAliveIntervalInMilliseconds : DEFAULT_PING_INTERVAL_IN_MS;\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize !== null && statefulReconnectBufferSize !== void 0 ? statefulReconnectBufferSize : DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\n        this._logger = logger;\n        this._protocol = protocol;\n        this.connection = connection;\n        this._reconnectPolicy = reconnectPolicy;\n        this._handshakeProtocol = new _HandshakeProtocol__WEBPACK_IMPORTED_MODULE_2__.HandshakeProtocol();\n        this.connection.onreceive = (data)=>this._processIncomingData(data);\n        this.connection.onclose = (error)=>this._connectionClosed(error);\n        this._callbacks = {};\n        this._methods = {};\n        this._closedCallbacks = [];\n        this._reconnectingCallbacks = [];\n        this._reconnectedCallbacks = [];\n        this._invocationId = 0;\n        this._receivedHandshakeResponse = false;\n        this._connectionState = HubConnectionState.Disconnected;\n        this._connectionStarted = false;\n        this._cachedPingMessage = this._protocol.writeMessage({\n            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Ping\n        });\n    }\n    /** Indicates the state of the {@link HubConnection} to the server. */ get state() {\n        return this._connectionState;\n    }\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */ get connectionId() {\n        return this.connection ? this.connection.connectionId || null : null;\n    }\n    /** Indicates the url of the {@link HubConnection} to the server. */ get baseUrl() {\n        return this.connection.baseUrl || \"\";\n    }\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */ set baseUrl(url) {\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\n        }\n        if (!url) {\n            throw new Error(\"The HubConnection url must be a valid url.\");\n        }\n        this.connection.baseUrl = url;\n    }\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */ start() {\n        this._startPromise = this._startWithStateTransitions();\n        return this._startPromise;\n    }\n    async _startWithStateTransitions() {\n        if (this._connectionState !== HubConnectionState.Disconnected) {\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\n        }\n        this._connectionState = HubConnectionState.Connecting;\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Starting HubConnection.\");\n        try {\n            await this._startInternal();\n            if (_Utils__WEBPACK_IMPORTED_MODULE_1__.Platform.isBrowser) {\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\n            }\n            this._connectionState = HubConnectionState.Connected;\n            this._connectionStarted = true;\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"HubConnection connected successfully.\");\n        } catch (e) {\n            this._connectionState = HubConnectionState.Disconnected;\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\n            return Promise.reject(e);\n        }\n    }\n    async _startInternal() {\n        this._stopDuringStartError = undefined;\n        this._receivedHandshakeResponse = false;\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\n        const handshakePromise = new Promise((resolve, reject)=>{\n            this._handshakeResolver = resolve;\n            this._handshakeRejecter = reject;\n        });\n        await this.connection.start(this._protocol.transferFormat);\n        try {\n            let version = this._protocol.version;\n            if (!this.connection.features.reconnect) {\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\n                version = 1;\n            }\n            const handshakeRequest = {\n                protocol: this._protocol.name,\n                version\n            };\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Sending handshake request.\");\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\n            this._cleanupTimeout();\n            this._resetTimeoutPeriod();\n            this._resetKeepAliveInterval();\n            await handshakePromise;\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\n            // and the connection was closed.\n            if (this._stopDuringStartError) {\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\n                // will cause the calling continuation to get scheduled to run later.\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\n                throw this._stopDuringStartError;\n            }\n            const useStatefulReconnect = this.connection.features.reconnect || false;\n            if (useStatefulReconnect) {\n                this._messageBuffer = new _MessageBuffer__WEBPACK_IMPORTED_MODULE_4__.MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\n                this.connection.features.resend = ()=>{\n                    if (this._messageBuffer) {\n                        return this._messageBuffer._resend();\n                    }\n                };\n            }\n            if (!this.connection.features.inherentKeepAlive) {\n                await this._sendMessage(this._cachedPingMessage);\n            }\n        } catch (e) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\n            this._cleanupTimeout();\n            this._cleanupPingTimer();\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n            await this.connection.stop(e);\n            throw e;\n        }\n    }\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */ async stop() {\n        // Capture the start promise before the connection might be restarted in an onclose callback.\n        const startPromise = this._startPromise;\n        this.connection.features.reconnect = false;\n        this._stopPromise = this._stopInternal();\n        await this._stopPromise;\n        try {\n            // Awaiting undefined continues immediately\n            await startPromise;\n        } catch (e) {\n        // This exception is returned to the user as a rejected Promise from the start method.\n        }\n    }\n    _stopInternal(error) {\n        if (this._connectionState === HubConnectionState.Disconnected) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\n            return Promise.resolve();\n        }\n        if (this._connectionState === HubConnectionState.Disconnecting) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n            return this._stopPromise;\n        }\n        const state = this._connectionState;\n        this._connectionState = HubConnectionState.Disconnecting;\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Stopping HubConnection.\");\n        if (this._reconnectDelayHandle) {\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\n            // fire the onclose callbacks.\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\n            clearTimeout(this._reconnectDelayHandle);\n            this._reconnectDelayHandle = undefined;\n            this._completeClose();\n            return Promise.resolve();\n        }\n        if (state === HubConnectionState.Connected) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._sendCloseMessage();\n        }\n        this._cleanupTimeout();\n        this._cleanupPingTimer();\n        this._stopDuringStartError = error || new _Errors__WEBPACK_IMPORTED_MODULE_5__.AbortError(\"The connection was stopped before the hub handshake could complete.\");\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\n        // to the disconnected state if need be before HttpConnection.stop() completes.\n        return this.connection.stop(error);\n    }\n    async _sendCloseMessage() {\n        try {\n            await this._sendWithProtocol(this._createCloseMessage());\n        } catch  {\n        // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\n        }\n    }\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */ stream(methodName, ...args) {\n        const [streams, streamIds] = this._replaceStreamingParams(args);\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\n        // eslint-disable-next-line prefer-const\n        let promiseQueue;\n        const subject = new _Subject__WEBPACK_IMPORTED_MODULE_6__.Subject();\n        subject.cancelCallback = ()=>{\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\n            delete this._callbacks[invocationDescriptor.invocationId];\n            return promiseQueue.then(()=>{\n                return this._sendWithProtocol(cancelInvocation);\n            });\n        };\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error)=>{\n            if (error) {\n                subject.error(error);\n                return;\n            } else if (invocationEvent) {\n                // invocationEvent will not be null when an error is not passed to the callback\n                if (invocationEvent.type === _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion) {\n                    if (invocationEvent.error) {\n                        subject.error(new Error(invocationEvent.error));\n                    } else {\n                        subject.complete();\n                    }\n                } else {\n                    subject.next(invocationEvent.item);\n                }\n            }\n        };\n        promiseQueue = this._sendWithProtocol(invocationDescriptor).catch((e)=>{\n            subject.error(e);\n            delete this._callbacks[invocationDescriptor.invocationId];\n        });\n        this._launchStreams(streams, promiseQueue);\n        return subject;\n    }\n    _sendMessage(message) {\n        this._resetKeepAliveInterval();\n        return this.connection.send(message);\n    }\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */ _sendWithProtocol(message) {\n        if (this._messageBuffer) {\n            return this._messageBuffer._send(message);\n        } else {\n            return this._sendMessage(this._protocol.writeMessage(message));\n        }\n    }\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */ send(methodName, ...args) {\n        const [streams, streamIds] = this._replaceStreamingParams(args);\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\n        this._launchStreams(streams, sendPromise);\n        return sendPromise;\n    }\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */ invoke(methodName, ...args) {\n        const [streams, streamIds] = this._replaceStreamingParams(args);\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\n        const p = new Promise((resolve, reject)=>{\n            // invocationId will always have a value for a non-blocking invocation\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error)=>{\n                if (error) {\n                    reject(error);\n                    return;\n                } else if (invocationEvent) {\n                    // invocationEvent will not be null when an error is not passed to the callback\n                    if (invocationEvent.type === _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion) {\n                        if (invocationEvent.error) {\n                            reject(new Error(invocationEvent.error));\n                        } else {\n                            resolve(invocationEvent.result);\n                        }\n                    } else {\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\n                    }\n                }\n            };\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor).catch((e)=>{\n                reject(e);\n                // invocationId will always have a value for a non-blocking invocation\n                delete this._callbacks[invocationDescriptor.invocationId];\n            });\n            this._launchStreams(streams, promiseQueue);\n        });\n        return p;\n    }\n    on(methodName, newMethod) {\n        if (!methodName || !newMethod) {\n            return;\n        }\n        methodName = methodName.toLowerCase();\n        if (!this._methods[methodName]) {\n            this._methods[methodName] = [];\n        }\n        // Preventing adding the same handler multiple times.\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\n            return;\n        }\n        this._methods[methodName].push(newMethod);\n    }\n    off(methodName, method) {\n        if (!methodName) {\n            return;\n        }\n        methodName = methodName.toLowerCase();\n        const handlers = this._methods[methodName];\n        if (!handlers) {\n            return;\n        }\n        if (method) {\n            const removeIdx = handlers.indexOf(method);\n            if (removeIdx !== -1) {\n                handlers.splice(removeIdx, 1);\n                if (handlers.length === 0) {\n                    delete this._methods[methodName];\n                }\n            }\n        } else {\n            delete this._methods[methodName];\n        }\n    }\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */ onclose(callback) {\n        if (callback) {\n            this._closedCallbacks.push(callback);\n        }\n    }\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */ onreconnecting(callback) {\n        if (callback) {\n            this._reconnectingCallbacks.push(callback);\n        }\n    }\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */ onreconnected(callback) {\n        if (callback) {\n            this._reconnectedCallbacks.push(callback);\n        }\n    }\n    _processIncomingData(data) {\n        this._cleanupTimeout();\n        if (!this._receivedHandshakeResponse) {\n            data = this._processHandshakeResponse(data);\n            this._receivedHandshakeResponse = true;\n        }\n        // Data may have all been read when processing handshake response\n        if (data) {\n            // Parse the messages\n            const messages = this._protocol.parseMessages(data, this._logger);\n            for (const message of messages){\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\n                    continue;\n                }\n                switch(message.type){\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Invocation:\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                        this._invokeClientMethod(message);\n                        break;\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.StreamItem:\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion:\n                        {\n                            const callback = this._callbacks[message.invocationId];\n                            if (callback) {\n                                if (message.type === _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion) {\n                                    delete this._callbacks[message.invocationId];\n                                }\n                                try {\n                                    callback(message);\n                                } catch (e) {\n                                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `Stream callback threw error: ${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.getErrorString)(e)}`);\n                                }\n                            }\n                            break;\n                        }\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Ping:\n                        break;\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Close:\n                        {\n                            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, \"Close message received from server.\");\n                            const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\n                            if (message.allowReconnect === true) {\n                                // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\n                                // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\n                                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                                this.connection.stop(error);\n                            } else {\n                                // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\n                                this._stopPromise = this._stopInternal(error);\n                            }\n                            break;\n                        }\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Ack:\n                        if (this._messageBuffer) {\n                            this._messageBuffer._ack(message);\n                        }\n                        break;\n                    case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Sequence:\n                        if (this._messageBuffer) {\n                            this._messageBuffer._resetSequence(message);\n                        }\n                        break;\n                    default:\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning, `Invalid message type: ${message.type}.`);\n                        break;\n                }\n            }\n        }\n        this._resetTimeoutPeriod();\n    }\n    _processHandshakeResponse(data) {\n        let responseMessage;\n        let remainingData;\n        try {\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\n        } catch (e) {\n            const message = \"Error parsing handshake response: \" + e;\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, message);\n            const error = new Error(message);\n            this._handshakeRejecter(error);\n            throw error;\n        }\n        if (responseMessage.error) {\n            const message = \"Server returned handshake error: \" + responseMessage.error;\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, message);\n            const error = new Error(message);\n            this._handshakeRejecter(error);\n            throw error;\n        } else {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Server handshake complete.\");\n        }\n        this._handshakeResolver();\n        return remainingData;\n    }\n    _resetKeepAliveInterval() {\n        if (this.connection.features.inherentKeepAlive) {\n            return;\n        }\n        // Set the time we want the next keep alive to be sent\n        // Timer will be setup on next message receive\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\n        this._cleanupPingTimer();\n    }\n    _resetTimeoutPeriod() {\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n            // Set the timeout timer\n            this._timeoutHandle = setTimeout(()=>this.serverTimeout(), this.serverTimeoutInMilliseconds);\n            // Set keepAlive timer if there isn't one\n            if (this._pingServerHandle === undefined) {\n                let nextPing = this._nextKeepAlive - new Date().getTime();\n                if (nextPing < 0) {\n                    nextPing = 0;\n                }\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\n                this._pingServerHandle = setTimeout(async ()=>{\n                    if (this._connectionState === HubConnectionState.Connected) {\n                        try {\n                            await this._sendMessage(this._cachedPingMessage);\n                        } catch  {\n                            // We don't care about the error. It should be seen elsewhere in the client.\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\n                            this._cleanupPingTimer();\n                        }\n                    }\n                }, nextPing);\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    serverTimeout() {\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n    }\n    async _invokeClientMethod(invocationMessage) {\n        const methodName = invocationMessage.target.toLowerCase();\n        const methods = this._methods[methodName];\n        if (!methods) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning, `No client method with the name '${methodName}' found.`);\n            // No handlers provided by client but the server is expecting a response still, so we send an error\n            if (invocationMessage.invocationId) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\n            }\n            return;\n        }\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\n        const methodsCopy = methods.slice();\n        // Server expects a response\n        const expectsResponse = invocationMessage.invocationId ? true : false;\n        // We preserve the last result or exception but still call all handlers\n        let res;\n        let exception;\n        let completionMessage;\n        for (const m of methodsCopy){\n            try {\n                const prevRes = res;\n                res = await m.apply(this, invocationMessage.arguments);\n                if (expectsResponse && res && prevRes) {\n                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `Client provided multiple results.`, null);\n                }\n                // Ignore exception if we got a result after, the exception will be logged\n                exception = undefined;\n            } catch (e) {\n                exception = e;\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\n            }\n        }\n        if (completionMessage) {\n            await this._sendWithProtocol(completionMessage);\n        } else if (expectsResponse) {\n            // If there is an exception that means either no result was given or a handler after a result threw\n            if (exception) {\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `${exception}`, null);\n            } else if (res !== undefined) {\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, null, res);\n            } else {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null);\n            }\n            await this._sendWithProtocol(completionMessage);\n        } else {\n            if (res) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\n            }\n        }\n    }\n    _connectionClosed(error) {\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\n        this._stopDuringStartError = this._stopDuringStartError || error || new _Errors__WEBPACK_IMPORTED_MODULE_5__.AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\n        // If it has already completed, this should just noop.\n        if (this._handshakeResolver) {\n            this._handshakeResolver();\n        }\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\n        this._cleanupTimeout();\n        this._cleanupPingTimer();\n        if (this._connectionState === HubConnectionState.Disconnecting) {\n            this._completeClose(error);\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._reconnect(error);\n        } else if (this._connectionState === HubConnectionState.Connected) {\n            this._completeClose(error);\n        }\n    // If none of the above if conditions were true were called the HubConnection must be in either:\n    // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\n    // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\n    //    and potentially continue the reconnect() loop.\n    // 3. The Disconnected state in which case we're already done.\n    }\n    _completeClose(error) {\n        if (this._connectionStarted) {\n            this._connectionState = HubConnectionState.Disconnected;\n            this._connectionStarted = false;\n            if (this._messageBuffer) {\n                this._messageBuffer._dispose(error !== null && error !== void 0 ? error : new Error(\"Connection closed.\"));\n                this._messageBuffer = undefined;\n            }\n            if (_Utils__WEBPACK_IMPORTED_MODULE_1__.Platform.isBrowser) {\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\n            }\n            try {\n                this._closedCallbacks.forEach((c)=>c.apply(this, [\n                        error\n                    ]));\n            } catch (e) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\n            }\n        }\n    }\n    async _reconnect(error) {\n        const reconnectStartTime = Date.now();\n        let previousReconnectAttempts = 0;\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\n        if (nextRetryDelay === null) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\n            this._completeClose(error);\n            return;\n        }\n        this._connectionState = HubConnectionState.Reconnecting;\n        if (error) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\n        } else {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, \"Connection reconnecting.\");\n        }\n        if (this._reconnectingCallbacks.length !== 0) {\n            try {\n                this._reconnectingCallbacks.forEach((c)=>c.apply(this, [\n                        error\n                    ]));\n            } catch (e) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\n            }\n            // Exit early if an onreconnecting callback called connection.stop().\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\n                return;\n            }\n        }\n        while(nextRetryDelay !== null){\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\n            await new Promise((resolve)=>{\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\n            });\n            this._reconnectDelayHandle = undefined;\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\n                return;\n            }\n            try {\n                await this._startInternal();\n                this._connectionState = HubConnectionState.Connected;\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, \"HubConnection reconnected successfully.\");\n                if (this._reconnectedCallbacks.length !== 0) {\n                    try {\n                        this._reconnectedCallbacks.forEach((c)=>c.apply(this, [\n                                this.connection.connectionId\n                            ]));\n                    } catch (e) {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\n                    }\n                }\n                return;\n            } catch (e) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\n                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\n                        this._completeClose();\n                    }\n                    return;\n                }\n                retryError = e instanceof Error ? e : new Error(e.toString());\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\n            }\n        }\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\n        this._completeClose();\n    }\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\n        try {\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\n                elapsedMilliseconds,\n                previousRetryCount,\n                retryReason\n            });\n        } catch (e) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\n            return null;\n        }\n    }\n    _cancelCallbacksWithError(error) {\n        const callbacks = this._callbacks;\n        this._callbacks = {};\n        Object.keys(callbacks).forEach((key)=>{\n            const callback = callbacks[key];\n            try {\n                callback(null, error);\n            } catch (e) {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.getErrorString)(e)}`);\n            }\n        });\n    }\n    _cleanupPingTimer() {\n        if (this._pingServerHandle) {\n            clearTimeout(this._pingServerHandle);\n            this._pingServerHandle = undefined;\n        }\n    }\n    _cleanupTimeout() {\n        if (this._timeoutHandle) {\n            clearTimeout(this._timeoutHandle);\n        }\n    }\n    _createInvocation(methodName, args, nonblocking, streamIds) {\n        if (nonblocking) {\n            if (streamIds.length !== 0) {\n                return {\n                    arguments: args,\n                    streamIds,\n                    target: methodName,\n                    type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Invocation\n                };\n            } else {\n                return {\n                    arguments: args,\n                    target: methodName,\n                    type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Invocation\n                };\n            }\n        } else {\n            const invocationId = this._invocationId;\n            this._invocationId++;\n            if (streamIds.length !== 0) {\n                return {\n                    arguments: args,\n                    invocationId: invocationId.toString(),\n                    streamIds,\n                    target: methodName,\n                    type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Invocation\n                };\n            } else {\n                return {\n                    arguments: args,\n                    invocationId: invocationId.toString(),\n                    target: methodName,\n                    type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Invocation\n                };\n            }\n        }\n    }\n    _launchStreams(streams, promiseQueue) {\n        if (streams.length === 0) {\n            return;\n        }\n        // Synchronize stream data so they arrive in-order on the server\n        if (!promiseQueue) {\n            promiseQueue = Promise.resolve();\n        }\n        // We want to iterate over the keys, since the keys are the stream ids\n        // eslint-disable-next-line guard-for-in\n        for(const streamId in streams){\n            streams[streamId].subscribe({\n                complete: ()=>{\n                    promiseQueue = promiseQueue.then(()=>this._sendWithProtocol(this._createCompletionMessage(streamId)));\n                },\n                error: (err)=>{\n                    let message;\n                    if (err instanceof Error) {\n                        message = err.message;\n                    } else if (err && err.toString) {\n                        message = err.toString();\n                    } else {\n                        message = \"Unknown error\";\n                    }\n                    promiseQueue = promiseQueue.then(()=>this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\n                },\n                next: (item)=>{\n                    promiseQueue = promiseQueue.then(()=>this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\n                }\n            });\n        }\n    }\n    _replaceStreamingParams(args) {\n        const streams = [];\n        const streamIds = [];\n        for(let i = 0; i < args.length; i++){\n            const argument = args[i];\n            if (this._isObservable(argument)) {\n                const streamId = this._invocationId;\n                this._invocationId++;\n                // Store the stream for later use\n                streams[streamId] = argument;\n                streamIds.push(streamId.toString());\n                // remove stream from args\n                args.splice(i, 1);\n            }\n        }\n        return [\n            streams,\n            streamIds\n        ];\n    }\n    _isObservable(arg) {\n        // This allows other stream implementations to just work (like rxjs)\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\n    }\n    _createStreamInvocation(methodName, args, streamIds) {\n        const invocationId = this._invocationId;\n        this._invocationId++;\n        if (streamIds.length !== 0) {\n            return {\n                arguments: args,\n                invocationId: invocationId.toString(),\n                streamIds,\n                target: methodName,\n                type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.StreamInvocation\n            };\n        } else {\n            return {\n                arguments: args,\n                invocationId: invocationId.toString(),\n                target: methodName,\n                type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.StreamInvocation\n            };\n        }\n    }\n    _createCancelInvocation(id) {\n        return {\n            invocationId: id,\n            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.CancelInvocation\n        };\n    }\n    _createStreamItemMessage(id, item) {\n        return {\n            invocationId: id,\n            item,\n            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.StreamItem\n        };\n    }\n    _createCompletionMessage(id, error, result) {\n        if (error) {\n            return {\n                error,\n                invocationId: id,\n                type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion\n            };\n        }\n        return {\n            invocationId: id,\n            result,\n            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion\n        };\n    }\n    _createCloseMessage() {\n        return {\n            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Close\n        };\n    }\n} //# sourceMappingURL=HubConnection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/HubConnection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HubConnectionBuilder: () => (/* binding */ HubConnectionBuilder)\n/* harmony export */ });\n/* harmony import */ var _DefaultReconnectPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DefaultReconnectPolicy */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js\");\n/* harmony import */ var _HttpConnection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HttpConnection */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpConnection.js\");\n/* harmony import */ var _HubConnection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./HubConnection */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HubConnection.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _JsonHubProtocol__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./JsonHubProtocol */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js\");\n/* harmony import */ var _Loggers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Loggers */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Loggers.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\n\n\nconst LogLevelNameMapping = {\n    trace: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trace,\n    debug: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug,\n    info: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information,\n    information: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information,\n    warn: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning,\n    warning: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning,\n    error: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error,\n    critical: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Critical,\n    none: _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.None\n};\nfunction parseLogLevel(name) {\n    // Case-insensitive matching via lower-casing\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\n    if (typeof mapping !== \"undefined\") {\n        return mapping;\n    } else {\n        throw new Error(`Unknown log level: ${name}`);\n    }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */ class HubConnectionBuilder {\n    configureLogging(logging) {\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(logging, \"logging\");\n        if (isLogger(logging)) {\n            this.logger = logging;\n        } else if (typeof logging === \"string\") {\n            const logLevel = parseLogLevel(logging);\n            this.logger = new _Utils__WEBPACK_IMPORTED_MODULE_1__.ConsoleLogger(logLevel);\n        } else {\n            this.logger = new _Utils__WEBPACK_IMPORTED_MODULE_1__.ConsoleLogger(logging);\n        }\n        return this;\n    }\n    withUrl(url, transportTypeOrOptions) {\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(url, \"url\");\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isNotEmpty(url, \"url\");\n        this.url = url;\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n        if (typeof transportTypeOrOptions === \"object\") {\n            this.httpConnectionOptions = {\n                ...this.httpConnectionOptions,\n                ...transportTypeOrOptions\n            };\n        } else {\n            this.httpConnectionOptions = {\n                ...this.httpConnectionOptions,\n                transport: transportTypeOrOptions\n            };\n        }\n        return this;\n    }\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */ withHubProtocol(protocol) {\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(protocol, \"protocol\");\n        this.protocol = protocol;\n        return this;\n    }\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n        if (this.reconnectPolicy) {\n            throw new Error(\"A reconnectPolicy has already been set.\");\n        }\n        if (!retryDelaysOrReconnectPolicy) {\n            this.reconnectPolicy = new _DefaultReconnectPolicy__WEBPACK_IMPORTED_MODULE_2__.DefaultReconnectPolicy();\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n            this.reconnectPolicy = new _DefaultReconnectPolicy__WEBPACK_IMPORTED_MODULE_2__.DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n        } else {\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n        }\n        return this;\n    }\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */ withServerTimeout(milliseconds) {\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(milliseconds, \"milliseconds\");\n        this._serverTimeoutInMilliseconds = milliseconds;\n        return this;\n    }\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */ withKeepAliveInterval(milliseconds) {\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(milliseconds, \"milliseconds\");\n        this._keepAliveIntervalInMilliseconds = milliseconds;\n        return this;\n    }\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */ withStatefulReconnect(options) {\n        if (this.httpConnectionOptions === undefined) {\n            this.httpConnectionOptions = {};\n        }\n        this.httpConnectionOptions._useStatefulReconnect = true;\n        this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\n        return this;\n    }\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */ build() {\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n        // provided to configureLogger\n        const httpConnectionOptions = this.httpConnectionOptions || {};\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n        if (httpConnectionOptions.logger === undefined) {\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n            httpConnectionOptions.logger = this.logger;\n        }\n        // Now create the connection\n        if (!this.url) {\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n        }\n        const connection = new _HttpConnection__WEBPACK_IMPORTED_MODULE_3__.HttpConnection(this.url, httpConnectionOptions);\n        return _HubConnection__WEBPACK_IMPORTED_MODULE_4__.HubConnection.create(connection, this.logger || _Loggers__WEBPACK_IMPORTED_MODULE_5__.NullLogger.instance, this.protocol || new _JsonHubProtocol__WEBPACK_IMPORTED_MODULE_6__.JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\n    }\n}\nfunction isLogger(logger) {\n    return logger.log !== undefined;\n} //# sourceMappingURL=HubConnectionBuilder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js":
/*!******************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageType: () => (/* binding */ MessageType)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n/** Defines the type of a Hub Message. */ var MessageType;\n(function(MessageType) {\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */ MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */ MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */ MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */ MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */ MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */ MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */ MessageType[MessageType[\"Close\"] = 7] = \"Close\";\n    MessageType[MessageType[\"Ack\"] = 8] = \"Ack\";\n    MessageType[MessageType[\"Sequence\"] = 9] = \"Sequence\";\n})(MessageType || (MessageType = {})); //# sourceMappingURL=IHubProtocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0lIdWJQcm90b2NvbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0VBQWdFO0FBQ2hFLHVFQUF1RTtBQUN2RSx1Q0FBdUMsR0FDaEMsSUFBSUEsWUFBWTtBQUN0QixVQUFVQSxXQUFXO0lBQ2xCLDhIQUE4SCxHQUM5SEEsV0FBVyxDQUFDQSxXQUFXLENBQUMsYUFBYSxHQUFHLEVBQUUsR0FBRztJQUM3Qyw2SEFBNkgsR0FDN0hBLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDN0MsNkhBQTZILEdBQzdIQSxXQUFXLENBQUNBLFdBQVcsQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQzdDLDBJQUEwSSxHQUMxSUEsV0FBVyxDQUFDQSxXQUFXLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQ25ELDBJQUEwSSxHQUMxSUEsV0FBVyxDQUFDQSxXQUFXLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQ25ELGlIQUFpSCxHQUNqSEEsV0FBVyxDQUFDQSxXQUFXLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztJQUN2QyxtSEFBbUgsR0FDbkhBLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDeENBLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDdENBLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7QUFDL0MsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQyxLQUNsQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItc29ja2V0cy1jaGF0LWNsaWVudC1hcHAvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0lIdWJQcm90b2NvbC5qcz8wOTE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSAuTkVUIEZvdW5kYXRpb24gdW5kZXIgb25lIG9yIG1vcmUgYWdyZWVtZW50cy5cclxuLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuLyoqIERlZmluZXMgdGhlIHR5cGUgb2YgYSBIdWIgTWVzc2FnZS4gKi9cclxuZXhwb3J0IHZhciBNZXNzYWdlVHlwZTtcclxuKGZ1bmN0aW9uIChNZXNzYWdlVHlwZSkge1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhbiBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiSW52b2NhdGlvblwiXSA9IDFdID0gXCJJbnZvY2F0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgU3RyZWFtSXRlbSBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlN0cmVhbUl0ZW1NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlN0cmVhbUl0ZW1cIl0gPSAyXSA9IFwiU3RyZWFtSXRlbVwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENvbXBsZXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5Db21wbGV0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDb21wbGV0aW9uXCJdID0gM10gPSBcIkNvbXBsZXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBTdHJlYW0gSW52b2NhdGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlN0cmVhbUludm9jYXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlN0cmVhbUludm9jYXRpb25cIl0gPSA0XSA9IFwiU3RyZWFtSW52b2NhdGlvblwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENhbmNlbCBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuQ2FuY2VsSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ2FuY2VsSW52b2NhdGlvblwiXSA9IDVdID0gXCJDYW5jZWxJbnZvY2F0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgUGluZyBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlBpbmdNZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlBpbmdcIl0gPSA2XSA9IFwiUGluZ1wiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENsb3NlIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuQ2xvc2VNZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkNsb3NlXCJdID0gN10gPSBcIkNsb3NlXCI7XHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkFja1wiXSA9IDhdID0gXCJBY2tcIjtcclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiU2VxdWVuY2VcIl0gPSA5XSA9IFwiU2VxdWVuY2VcIjtcclxufSkoTWVzc2FnZVR5cGUgfHwgKE1lc3NhZ2VUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUh1YlByb3RvY29sLmpzLm1hcCJdLCJuYW1lcyI6WyJNZXNzYWdlVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js":
/*!*************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/ILogger.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */ var LogLevel;\n(function(LogLevel) {\n    /** Log level for very low severity diagnostic messages. */ LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    /** Log level for low severity diagnostic messages. */ LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    /** Log level for informational diagnostic messages. */ LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */ LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */ LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */ LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */ LogLevel[LogLevel[\"None\"] = 6] = \"None\";\n})(LogLevel || (LogLevel = {})); //# sourceMappingURL=ILogger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0lMb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGdFQUFnRTtBQUNoRSx1RUFBdUU7QUFDdkUsMkdBQTJHO0FBQzNHOzs7Q0FHQyxHQUNNLElBQUlBLFNBQVM7QUFDbkIsVUFBVUEsUUFBUTtJQUNmLHlEQUF5RCxHQUN6REEsUUFBUSxDQUFDQSxRQUFRLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUNsQyxvREFBb0QsR0FDcERBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDbEMscURBQXFELEdBQ3JEQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHO0lBQ3hDLHlFQUF5RSxHQUN6RUEsUUFBUSxDQUFDQSxRQUFRLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUNwQyx3RkFBd0YsR0FDeEZBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDbEMsMEdBQTBHLEdBQzFHQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0lBQ3JDLHNIQUFzSCxHQUN0SEEsUUFBUSxDQUFDQSxRQUFRLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztBQUNyQyxHQUFHQSxZQUFhQSxDQUFBQSxXQUFXLENBQUMsS0FDNUIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLXNvY2tldHMtY2hhdC1jbGllbnQtYXBwLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2VzbS9JTG9nZ2VyLmpzP2Y2MjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLlxyXG4vLyBUaGUgLk5FVCBGb3VuZGF0aW9uIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGRlc2lnbmVkIHRvIG1hdGNoIHRoZSBBU1AuTkVUIExvZyBMZXZlbHMgc2luY2UgdGhhdCdzIHRoZSBwYXR0ZXJuIHdlJ3JlIGVtdWxhdGluZyBoZXJlLlxyXG4vKiogSW5kaWNhdGVzIHRoZSBzZXZlcml0eSBvZiBhIGxvZyBtZXNzYWdlLlxyXG4gKlxyXG4gKiBMb2cgTGV2ZWxzIGFyZSBvcmRlcmVkIGluIGluY3JlYXNpbmcgc2V2ZXJpdHkuIFNvIGBEZWJ1Z2AgaXMgbW9yZSBzZXZlcmUgdGhhbiBgVHJhY2VgLCBldGMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIExvZ0xldmVsO1xyXG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciB2ZXJ5IGxvdyBzZXZlcml0eSBkaWFnbm9zdGljIG1lc3NhZ2VzLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJUcmFjZVwiXSA9IDBdID0gXCJUcmFjZVwiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgbG93IHNldmVyaXR5IGRpYWdub3N0aWMgbWVzc2FnZXMuICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkRlYnVnXCJdID0gMV0gPSBcIkRlYnVnXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBpbmZvcm1hdGlvbmFsIGRpYWdub3N0aWMgbWVzc2FnZXMuICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkluZm9ybWF0aW9uXCJdID0gMl0gPSBcIkluZm9ybWF0aW9uXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBkaWFnbm9zdGljIG1lc3NhZ2VzIHRoYXQgaW5kaWNhdGUgYSBub24tZmF0YWwgcHJvYmxlbS4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV2FybmluZ1wiXSA9IDNdID0gXCJXYXJuaW5nXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBkaWFnbm9zdGljIG1lc3NhZ2VzIHRoYXQgaW5kaWNhdGUgYSBmYWlsdXJlIGluIHRoZSBjdXJyZW50IG9wZXJhdGlvbi4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRXJyb3JcIl0gPSA0XSA9IFwiRXJyb3JcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIGZhaWx1cmUgdGhhdCB3aWxsIHRlcm1pbmF0ZSB0aGUgZW50aXJlIGFwcGxpY2F0aW9uLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJDcml0aWNhbFwiXSA9IDVdID0gXCJDcml0aWNhbFwiO1xyXG4gICAgLyoqIFRoZSBoaWdoZXN0IHBvc3NpYmxlIGxvZyBsZXZlbC4gVXNlZCB3aGVuIGNvbmZpZ3VyaW5nIGxvZ2dpbmcgdG8gaW5kaWNhdGUgdGhhdCBubyBsb2cgbWVzc2FnZXMgc2hvdWxkIGJlIGVtaXR0ZWQuICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIk5vbmVcIl0gPSA2XSA9IFwiTm9uZVwiO1xyXG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JTG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJMb2dMZXZlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js":
/*!****************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/ITransport.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpTransportType: () => (/* binding */ HttpTransportType),\n/* harmony export */   TransferFormat: () => (/* binding */ TransferFormat)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\n/** Specifies a specific HTTP transport type. */ var HttpTransportType;\n(function(HttpTransportType) {\n    /** Specifies no transport preference. */ HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\n    /** Specifies the WebSockets transport. */ HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\n    /** Specifies the Server-Sent Events transport. */ HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\n    /** Specifies the Long Polling transport. */ HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\n})(HttpTransportType || (HttpTransportType = {}));\n/** Specifies the transfer format for a connection. */ var TransferFormat;\n(function(TransferFormat) {\n    /** Specifies that only text data will be transmitted over the connection. */ TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\n    /** Specifies that binary data will be transmitted over the connection. */ TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\n})(TransferFormat || (TransferFormat = {})); //# sourceMappingURL=ITransport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0lUcmFuc3BvcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQ3ZFLDZGQUE2RjtBQUM3Riw4Q0FBOEMsR0FDdkMsSUFBSUEsa0JBQWtCO0FBQzVCLFVBQVVBLGlCQUFpQjtJQUN4Qix1Q0FBdUMsR0FDdkNBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0lBQ25ELHdDQUF3QyxHQUN4Q0EsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDekQsZ0RBQWdELEdBQ2hEQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQy9ELDBDQUEwQyxHQUMxQ0EsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7QUFDOUQsR0FBR0EscUJBQXNCQSxDQUFBQSxvQkFBb0IsQ0FBQztBQUM5QyxvREFBb0QsR0FDN0MsSUFBSUMsZUFBZTtBQUN6QixVQUFVQSxjQUFjO0lBQ3JCLDJFQUEyRSxHQUMzRUEsY0FBYyxDQUFDQSxjQUFjLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztJQUM3Qyx3RUFBd0UsR0FDeEVBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7QUFDbkQsR0FBR0Esa0JBQW1CQSxDQUFBQSxpQkFBaUIsQ0FBQyxLQUN4QyxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItc29ja2V0cy1jaGF0LWNsaWVudC1hcHAvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0lUcmFuc3BvcnQuanM/NWMxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgLk5FVCBGb3VuZGF0aW9uIHVuZGVyIG9uZSBvciBtb3JlIGFncmVlbWVudHMuXHJcbi8vIFRoZSAuTkVUIEZvdW5kYXRpb24gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbi8vIFRoaXMgd2lsbCBiZSB0cmVhdGVkIGFzIGEgYml0IGZsYWcgaW4gdGhlIGZ1dHVyZSwgc28gd2Uga2VlcCBpdCB1c2luZyBwb3dlci1vZi10d28gdmFsdWVzLlxyXG4vKiogU3BlY2lmaWVzIGEgc3BlY2lmaWMgSFRUUCB0cmFuc3BvcnQgdHlwZS4gKi9cclxuZXhwb3J0IHZhciBIdHRwVHJhbnNwb3J0VHlwZTtcclxuKGZ1bmN0aW9uIChIdHRwVHJhbnNwb3J0VHlwZSkge1xyXG4gICAgLyoqIFNwZWNpZmllcyBubyB0cmFuc3BvcnQgcHJlZmVyZW5jZS4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBXZWJTb2NrZXRzIHRyYW5zcG9ydC4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiV2ViU29ja2V0c1wiXSA9IDFdID0gXCJXZWJTb2NrZXRzXCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBTZXJ2ZXItU2VudCBFdmVudHMgdHJhbnNwb3J0LiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJTZXJ2ZXJTZW50RXZlbnRzXCJdID0gMl0gPSBcIlNlcnZlclNlbnRFdmVudHNcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIExvbmcgUG9sbGluZyB0cmFuc3BvcnQuICovXHJcbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIkxvbmdQb2xsaW5nXCJdID0gNF0gPSBcIkxvbmdQb2xsaW5nXCI7XHJcbn0pKEh0dHBUcmFuc3BvcnRUeXBlIHx8IChIdHRwVHJhbnNwb3J0VHlwZSA9IHt9KSk7XHJcbi8qKiBTcGVjaWZpZXMgdGhlIHRyYW5zZmVyIGZvcm1hdCBmb3IgYSBjb25uZWN0aW9uLiAqL1xyXG5leHBvcnQgdmFyIFRyYW5zZmVyRm9ybWF0O1xyXG4oZnVuY3Rpb24gKFRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoYXQgb25seSB0ZXh0IGRhdGEgd2lsbCBiZSB0cmFuc21pdHRlZCBvdmVyIHRoZSBjb25uZWN0aW9uLiAqL1xyXG4gICAgVHJhbnNmZXJGb3JtYXRbVHJhbnNmZXJGb3JtYXRbXCJUZXh0XCJdID0gMV0gPSBcIlRleHRcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhhdCBiaW5hcnkgZGF0YSB3aWxsIGJlIHRyYW5zbWl0dGVkIG92ZXIgdGhlIGNvbm5lY3Rpb24uICovXHJcbiAgICBUcmFuc2ZlckZvcm1hdFtUcmFuc2ZlckZvcm1hdFtcIkJpbmFyeVwiXSA9IDJdID0gXCJCaW5hcnlcIjtcclxufSkoVHJhbnNmZXJGb3JtYXQgfHwgKFRyYW5zZmVyRm9ybWF0ID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SVRyYW5zcG9ydC5qcy5tYXAiXSwibmFtZXMiOlsiSHR0cFRyYW5zcG9ydFR5cGUiLCJUcmFuc2ZlckZvcm1hdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonHubProtocol: () => (/* binding */ JsonHubProtocol)\n/* harmony export */ });\n/* harmony import */ var _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IHubProtocol */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _ITransport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ITransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js\");\n/* harmony import */ var _Loggers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Loggers */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Loggers.js\");\n/* harmony import */ var _TextMessageFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TextMessageFormat */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */ class JsonHubProtocol {\n    constructor(){\n        /** @inheritDoc */ this.name = JSON_HUB_PROTOCOL_NAME;\n        /** @inheritDoc */ this.version = 2;\n        /** @inheritDoc */ this.transferFormat = _ITransport__WEBPACK_IMPORTED_MODULE_0__.TransferFormat.Text;\n    }\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */ parseMessages(input, logger) {\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n        if (typeof input !== \"string\") {\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n        }\n        if (!input) {\n            return [];\n        }\n        if (logger === null) {\n            logger = _Loggers__WEBPACK_IMPORTED_MODULE_1__.NullLogger.instance;\n        }\n        // Parse the messages\n        const messages = _TextMessageFormat__WEBPACK_IMPORTED_MODULE_2__.TextMessageFormat.parse(input);\n        const hubMessages = [];\n        for (const message of messages){\n            const parsedMessage = JSON.parse(message);\n            if (typeof parsedMessage.type !== \"number\") {\n                throw new Error(\"Invalid payload.\");\n            }\n            switch(parsedMessage.type){\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Invocation:\n                    this._isInvocationMessage(parsedMessage);\n                    break;\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.StreamItem:\n                    this._isStreamItemMessage(parsedMessage);\n                    break;\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Completion:\n                    this._isCompletionMessage(parsedMessage);\n                    break;\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Ping:\n                    break;\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Close:\n                    break;\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Ack:\n                    this._isAckMessage(parsedMessage);\n                    break;\n                case _IHubProtocol__WEBPACK_IMPORTED_MODULE_3__.MessageType.Sequence:\n                    this._isSequenceMessage(parsedMessage);\n                    break;\n                default:\n                    // Future protocol changes can add message types, old clients can ignore them\n                    logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n                    continue;\n            }\n            hubMessages.push(parsedMessage);\n        }\n        return hubMessages;\n    }\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */ writeMessage(message) {\n        return _TextMessageFormat__WEBPACK_IMPORTED_MODULE_2__.TextMessageFormat.write(JSON.stringify(message));\n    }\n    _isInvocationMessage(message) {\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n        if (message.invocationId !== undefined) {\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n        }\n    }\n    _isStreamItemMessage(message) {\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n        if (message.item === undefined) {\n            throw new Error(\"Invalid payload for StreamItem message.\");\n        }\n    }\n    _isCompletionMessage(message) {\n        if (message.result && message.error) {\n            throw new Error(\"Invalid payload for Completion message.\");\n        }\n        if (!message.result && message.error) {\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n        }\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n    }\n    _isAckMessage(message) {\n        if (typeof message.sequenceId !== \"number\") {\n            throw new Error(\"Invalid SequenceId for Ack message.\");\n        }\n    }\n    _isSequenceMessage(message) {\n        if (typeof message.sequenceId !== \"number\") {\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\n        }\n    }\n    _assertNotEmptyString(value, errorMessage) {\n        if (typeof value !== \"string\" || value === \"\") {\n            throw new Error(errorMessage);\n        }\n    }\n} //# sourceMappingURL=JsonHubProtocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/Loggers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/Loggers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NullLogger: () => (/* binding */ NullLogger)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n/** A logger that does nothing when log messages are sent to it. */ class NullLogger {\n    constructor(){}\n    /** @inheritDoc */ // eslint-disable-next-line\n    log(_logLevel, _message) {}\n}\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */ NullLogger.instance = new NullLogger(); //# sourceMappingURL=Loggers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL0xvZ2dlcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGdFQUFnRTtBQUNoRSx1RUFBdUU7QUFDdkUsaUVBQWlFLEdBQzFELE1BQU1BO0lBQ1RDLGFBQWMsQ0FBRTtJQUNoQixnQkFBZ0IsR0FDaEIsMkJBQTJCO0lBQzNCQyxJQUFJQyxTQUFTLEVBQUVDLFFBQVEsRUFBRSxDQUN6QjtBQUNKO0FBQ0EseUVBQXlFLEdBQ3pFSixXQUFXSyxRQUFRLEdBQUcsSUFBSUwsY0FDMUIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLXNvY2tldHMtY2hhdC1jbGllbnQtYXBwLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2VzbS9Mb2dnZXJzLmpzPzM2YmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLlxyXG4vLyBUaGUgLk5FVCBGb3VuZGF0aW9uIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4vKiogQSBsb2dnZXIgdGhhdCBkb2VzIG5vdGhpbmcgd2hlbiBsb2cgbWVzc2FnZXMgYXJlIHNlbnQgdG8gaXQuICovXHJcbmV4cG9ydCBjbGFzcyBOdWxsTG9nZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgbG9nKF9sb2dMZXZlbCwgX21lc3NhZ2UpIHtcclxuICAgIH1cclxufVxyXG4vKiogVGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5OdWxsTG9nZ2VyfS4gKi9cclxuTnVsbExvZ2dlci5pbnN0YW5jZSA9IG5ldyBOdWxsTG9nZ2VyKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvZ2dlcnMuanMubWFwIl0sIm5hbWVzIjpbIk51bGxMb2dnZXIiLCJjb25zdHJ1Y3RvciIsImxvZyIsIl9sb2dMZXZlbCIsIl9tZXNzYWdlIiwiaW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/Loggers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LongPollingTransport: () => (/* binding */ LongPollingTransport)\n/* harmony export */ });\n/* harmony import */ var _AbortController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortController */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/AbortController.js\");\n/* harmony import */ var _Errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _ITransport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ITransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n\n// Not exported from 'index', this type is internal.\n/** @private */ class LongPollingTransport {\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    get pollAborted() {\n        return this._pollAbort.aborted;\n    }\n    constructor(httpClient, logger, options){\n        this._httpClient = httpClient;\n        this._logger = logger;\n        this._pollAbort = new _AbortController__WEBPACK_IMPORTED_MODULE_0__.AbortController();\n        this._options = options;\n        this._running = false;\n        this.onreceive = null;\n        this.onclose = null;\n    }\n    async connect(url, transferFormat) {\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(url, \"url\");\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isRequired(transferFormat, \"transferFormat\");\n        _Utils__WEBPACK_IMPORTED_MODULE_1__.Arg.isIn(transferFormat, _ITransport__WEBPACK_IMPORTED_MODULE_2__.TransferFormat, \"transferFormat\");\n        this._url = url;\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n        if (transferFormat === _ITransport__WEBPACK_IMPORTED_MODULE_2__.TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n        }\n        const [name, value] = (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.getUserAgentHeader)();\n        const headers = {\n            [name]: value,\n            ...this._options.headers\n        };\n        const pollOptions = {\n            abortSignal: this._pollAbort.signal,\n            headers,\n            timeout: 100000,\n            withCredentials: this._options.withCredentials\n        };\n        if (transferFormat === _ITransport__WEBPACK_IMPORTED_MODULE_2__.TransferFormat.Binary) {\n            pollOptions.responseType = \"arraybuffer\";\n        }\n        // Make initial long polling request\n        // Server uses first long polling request to finish initializing connection and it returns without data\n        const pollUrl = `${url}&_=${Date.now()}`;\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n        const response = await this._httpClient.get(pollUrl, pollOptions);\n        if (response.statusCode !== 200) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n            // Mark running as false so that the poll immediately ends and runs the close logic\n            this._closeError = new _Errors__WEBPACK_IMPORTED_MODULE_4__.HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n        } else {\n            this._running = true;\n        }\n        this._receiving = this._poll(this._url, pollOptions);\n    }\n    async _poll(url, pollOptions) {\n        try {\n            while(this._running){\n                try {\n                    const pollUrl = `${url}&_=${Date.now()}`;\n                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\n                    if (response.statusCode === 204) {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n                        this._running = false;\n                    } else if (response.statusCode !== 200) {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n                        // Unexpected status code\n                        this._closeError = new _Errors__WEBPACK_IMPORTED_MODULE_4__.HttpError(response.statusText || \"\", response.statusCode);\n                        this._running = false;\n                    } else {\n                        // Process the response\n                        if (response.content) {\n                            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, `(LongPolling transport) data received. ${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.getDataDetail)(response.content, this._options.logMessageContent)}.`);\n                            if (this.onreceive) {\n                                this.onreceive(response.content);\n                            }\n                        } else {\n                            // This is another way timeout manifest.\n                            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                        }\n                    }\n                } catch (e) {\n                    if (!this._running) {\n                        // Log but disregard errors that occur after stopping\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n                    } else {\n                        if (e instanceof _Errors__WEBPACK_IMPORTED_MODULE_4__.TimeoutError) {\n                            // Ignore timeouts and reissue the poll.\n                            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                        } else {\n                            // Close the connection with the error as the result.\n                            this._closeError = e;\n                            this._running = false;\n                        }\n                    }\n                }\n            }\n        } finally{\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n            if (!this.pollAborted) {\n                this._raiseOnClose();\n            }\n        }\n    }\n    async send(data) {\n        if (!this._running) {\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n        }\n        return (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.sendMessage)(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\n    }\n    async stop() {\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n        this._running = false;\n        this._pollAbort.abort();\n        try {\n            await this._receiving;\n            // Send DELETE to clean up long polling on the server\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n            const headers = {};\n            const [name, value] = (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.getUserAgentHeader)();\n            headers[name] = value;\n            const deleteOptions = {\n                headers: {\n                    ...headers,\n                    ...this._options.headers\n                },\n                timeout: this._options.timeout,\n                withCredentials: this._options.withCredentials\n            };\n            let error;\n            try {\n                await this._httpClient.delete(this._url, deleteOptions);\n            } catch (err) {\n                error = err;\n            }\n            if (error) {\n                if (error instanceof _Errors__WEBPACK_IMPORTED_MODULE_4__.HttpError) {\n                    if (error.statusCode === 404) {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\n                    } else {\n                        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\n                    }\n                }\n            } else {\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n            }\n        } finally{\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n            // Raise close event here instead of in polling\n            // It needs to happen after the DELETE request is sent\n            this._raiseOnClose();\n        }\n    }\n    _raiseOnClose() {\n        if (this.onclose) {\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\n            if (this._closeError) {\n                logMessage += \" Error: \" + this._closeError;\n            }\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Trace, logMessage);\n            this.onclose(this._closeError);\n        }\n    }\n} //# sourceMappingURL=LongPollingTransport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/MessageBuffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/MessageBuffer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageBuffer: () => (/* binding */ MessageBuffer)\n/* harmony export */ });\n/* harmony import */ var _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IHubProtocol */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n/** @private */ class MessageBuffer {\n    constructor(protocol, connection, bufferSize){\n        this._bufferSize = 100000;\n        this._messages = [];\n        this._totalMessageCount = 0;\n        this._waitForSequenceMessage = false;\n        // Message IDs start at 1 and always increment by 1\n        this._nextReceivingSequenceId = 1;\n        this._latestReceivedSequenceId = 0;\n        this._bufferedByteCount = 0;\n        this._reconnectInProgress = false;\n        this._protocol = protocol;\n        this._connection = connection;\n        this._bufferSize = bufferSize;\n    }\n    async _send(message) {\n        const serializedMessage = this._protocol.writeMessage(message);\n        let backpressurePromise = Promise.resolve();\n        // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect\n        if (this._isInvocationMessage(message)) {\n            this._totalMessageCount++;\n            let backpressurePromiseResolver = ()=>{};\n            let backpressurePromiseRejector = ()=>{};\n            if ((0,_Utils__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(serializedMessage)) {\n                this._bufferedByteCount += serializedMessage.byteLength;\n            } else {\n                this._bufferedByteCount += serializedMessage.length;\n            }\n            if (this._bufferedByteCount >= this._bufferSize) {\n                backpressurePromise = new Promise((resolve, reject)=>{\n                    backpressurePromiseResolver = resolve;\n                    backpressurePromiseRejector = reject;\n                });\n            }\n            this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount, backpressurePromiseResolver, backpressurePromiseRejector));\n        }\n        try {\n            // If this is set it means we are reconnecting or resending\n            // We don't want to send on a disconnected connection\n            // And we don't want to send if resend is running since that would mean sending\n            // this message twice\n            if (!this._reconnectInProgress) {\n                await this._connection.send(serializedMessage);\n            }\n        } catch  {\n            this._disconnected();\n        }\n        await backpressurePromise;\n    }\n    _ack(ackMessage) {\n        let newestAckedMessage = -1;\n        // Find index of newest message being acked\n        for(let index = 0; index < this._messages.length; index++){\n            const element = this._messages[index];\n            if (element._id <= ackMessage.sequenceId) {\n                newestAckedMessage = index;\n                if ((0,_Utils__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(element._message)) {\n                    this._bufferedByteCount -= element._message.byteLength;\n                } else {\n                    this._bufferedByteCount -= element._message.length;\n                }\n                // resolve items that have already been sent and acked\n                element._resolver();\n            } else if (this._bufferedByteCount < this._bufferSize) {\n                // resolve items that now fall under the buffer limit but haven't been acked\n                element._resolver();\n            } else {\n                break;\n            }\n        }\n        if (newestAckedMessage !== -1) {\n            // We're removing everything including the message pointed to, so add 1\n            this._messages = this._messages.slice(newestAckedMessage + 1);\n        }\n    }\n    _shouldProcessMessage(message) {\n        if (this._waitForSequenceMessage) {\n            if (message.type !== _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Sequence) {\n                return false;\n            } else {\n                this._waitForSequenceMessage = false;\n                return true;\n            }\n        }\n        // No special processing for acks, pings, etc.\n        if (!this._isInvocationMessage(message)) {\n            return true;\n        }\n        const currentId = this._nextReceivingSequenceId;\n        this._nextReceivingSequenceId++;\n        if (currentId <= this._latestReceivedSequenceId) {\n            if (currentId === this._latestReceivedSequenceId) {\n                // Should only hit this if we just reconnected and the server is sending\n                // Messages it has buffered, which would mean it hasn't seen an Ack for these messages\n                this._ackTimer();\n            }\n            // Ignore, this is a duplicate message\n            return false;\n        }\n        this._latestReceivedSequenceId = currentId;\n        // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves\n        // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)\n        this._ackTimer();\n        return true;\n    }\n    _resetSequence(message) {\n        if (message.sequenceId > this._nextReceivingSequenceId) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._connection.stop(new Error(\"Sequence ID greater than amount of messages we've received.\"));\n            return;\n        }\n        this._nextReceivingSequenceId = message.sequenceId;\n    }\n    _disconnected() {\n        this._reconnectInProgress = true;\n        this._waitForSequenceMessage = true;\n    }\n    async _resend() {\n        const sequenceId = this._messages.length !== 0 ? this._messages[0]._id : this._totalMessageCount + 1;\n        await this._connection.send(this._protocol.writeMessage({\n            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Sequence,\n            sequenceId\n        }));\n        // Get a local variable to the _messages, just in case messages are acked while resending\n        // Which would slice the _messages array (which creates a new copy)\n        const messages = this._messages;\n        for (const element of messages){\n            await this._connection.send(element._message);\n        }\n        this._reconnectInProgress = false;\n    }\n    _dispose(error) {\n        error !== null && error !== void 0 ? error : error = new Error(\"Unable to reconnect to server.\");\n        // Unblock backpressure if any\n        for (const element of this._messages){\n            element._rejector(error);\n        }\n    }\n    _isInvocationMessage(message) {\n        // There is no way to check if something implements an interface.\n        // So we individually check the messages in a switch statement.\n        // To make sure we don't miss any message types we rely on the compiler\n        // seeing the function returns a value and it will do the\n        // exhaustive check for us on the switch statement, since we don't use 'case default'\n        switch(message.type){\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Invocation:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.StreamItem:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Completion:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.StreamInvocation:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.CancelInvocation:\n                return true;\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Close:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Sequence:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Ping:\n            case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Ack:\n                return false;\n        }\n    }\n    _ackTimer() {\n        if (this._ackTimerHandle === undefined) {\n            this._ackTimerHandle = setTimeout(async ()=>{\n                try {\n                    if (!this._reconnectInProgress) {\n                        await this._connection.send(this._protocol.writeMessage({\n                            type: _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__.MessageType.Ack,\n                            sequenceId: this._latestReceivedSequenceId\n                        }));\n                    }\n                // Ignore errors, that means the connection is closed and we don't care about the Ack message anymore.\n                } catch  {}\n                clearTimeout(this._ackTimerHandle);\n                this._ackTimerHandle = undefined;\n            // 1 second delay so we don't spam Ack messages if there are many messages being received at once.\n            }, 1000);\n        }\n    }\n}\nclass BufferedItem {\n    constructor(message, id, resolver, rejector){\n        this._message = message;\n        this._id = id;\n        this._resolver = resolver;\n        this._rejector = rejector;\n    }\n} //# sourceMappingURL=MessageBuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/MessageBuffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerSentEventsTransport: () => (/* binding */ ServerSentEventsTransport)\n/* harmony export */ });\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _ITransport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ITransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n/** @private */ class ServerSentEventsTransport {\n    constructor(httpClient, accessToken, logger, options){\n        this._httpClient = httpClient;\n        this._accessToken = accessToken;\n        this._logger = logger;\n        this._options = options;\n        this.onreceive = null;\n        this.onclose = null;\n    }\n    async connect(url, transferFormat) {\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isRequired(url, \"url\");\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isRequired(transferFormat, \"transferFormat\");\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isIn(transferFormat, _ITransport__WEBPACK_IMPORTED_MODULE_1__.TransferFormat, \"transferFormat\");\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Trace, \"(SSE transport) Connecting.\");\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\n        this._url = url;\n        if (this._accessToken) {\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\n        }\n        return new Promise((resolve, reject)=>{\n            let opened = false;\n            if (transferFormat !== _ITransport__WEBPACK_IMPORTED_MODULE_1__.TransferFormat.Text) {\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\n                return;\n            }\n            let eventSource;\n            if (_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isBrowser || _Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isWebWorker) {\n                eventSource = new this._options.EventSource(url, {\n                    withCredentials: this._options.withCredentials\n                });\n            } else {\n                // Non-browser passes cookies via the dictionary\n                const cookies = this._httpClient.getCookieString(url);\n                const headers = {};\n                headers.Cookie = cookies;\n                const [name, value] = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeader)();\n                headers[name] = value;\n                eventSource = new this._options.EventSource(url, {\n                    withCredentials: this._options.withCredentials,\n                    headers: {\n                        ...headers,\n                        ...this._options.headers\n                    }\n                });\n            }\n            try {\n                eventSource.onmessage = (e)=>{\n                    if (this.onreceive) {\n                        try {\n                            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Trace, `(SSE transport) data received. ${(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.getDataDetail)(e.data, this._options.logMessageContent)}.`);\n                            this.onreceive(e.data);\n                        } catch (error) {\n                            this._close(error);\n                            return;\n                        }\n                    }\n                };\n                // @ts-ignore: not using event on purpose\n                eventSource.onerror = (e)=>{\n                    // EventSource doesn't give any useful information about server side closes.\n                    if (opened) {\n                        this._close();\n                    } else {\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\" + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\" + \" If you have multiple servers check that sticky sessions are enabled.\"));\n                    }\n                };\n                eventSource.onopen = ()=>{\n                    this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Information, `SSE connected to ${this._url}`);\n                    this._eventSource = eventSource;\n                    opened = true;\n                    resolve();\n                };\n            } catch (e) {\n                reject(e);\n                return;\n            }\n        });\n    }\n    async send(data) {\n        if (!this._eventSource) {\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n        }\n        return (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.sendMessage)(this._logger, \"SSE\", this._httpClient, this._url, data, this._options);\n    }\n    stop() {\n        this._close();\n        return Promise.resolve();\n    }\n    _close(e) {\n        if (this._eventSource) {\n            this._eventSource.close();\n            this._eventSource = undefined;\n            if (this.onclose) {\n                this.onclose(e);\n            }\n        }\n    }\n} //# sourceMappingURL=ServerSentEventsTransport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/Subject.js":
/*!*************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/Subject.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Subject: () => (/* binding */ Subject)\n/* harmony export */ });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n/** Stream implementation to stream items to the server. */ class Subject {\n    constructor(){\n        this.observers = [];\n    }\n    next(item) {\n        for (const observer of this.observers){\n            observer.next(item);\n        }\n    }\n    error(err) {\n        for (const observer of this.observers){\n            if (observer.error) {\n                observer.error(err);\n            }\n        }\n    }\n    complete() {\n        for (const observer of this.observers){\n            if (observer.complete) {\n                observer.complete();\n            }\n        }\n    }\n    subscribe(observer) {\n        this.observers.push(observer);\n        return new _Utils__WEBPACK_IMPORTED_MODULE_0__.SubjectSubscription(this, observer);\n    }\n} //# sourceMappingURL=Subject.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL1N1YmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQ3pCO0FBQzlDLHlEQUF5RCxHQUNsRCxNQUFNQztJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsRUFBRTtJQUN2QjtJQUNBQyxLQUFLQyxJQUFJLEVBQUU7UUFDUCxLQUFLLE1BQU1DLFlBQVksSUFBSSxDQUFDSCxTQUFTLENBQUU7WUFDbkNHLFNBQVNGLElBQUksQ0FBQ0M7UUFDbEI7SUFDSjtJQUNBRSxNQUFNQyxHQUFHLEVBQUU7UUFDUCxLQUFLLE1BQU1GLFlBQVksSUFBSSxDQUFDSCxTQUFTLENBQUU7WUFDbkMsSUFBSUcsU0FBU0MsS0FBSyxFQUFFO2dCQUNoQkQsU0FBU0MsS0FBSyxDQUFDQztZQUNuQjtRQUNKO0lBQ0o7SUFDQUMsV0FBVztRQUNQLEtBQUssTUFBTUgsWUFBWSxJQUFJLENBQUNILFNBQVMsQ0FBRTtZQUNuQyxJQUFJRyxTQUFTRyxRQUFRLEVBQUU7Z0JBQ25CSCxTQUFTRyxRQUFRO1lBQ3JCO1FBQ0o7SUFDSjtJQUNBQyxVQUFVSixRQUFRLEVBQUU7UUFDaEIsSUFBSSxDQUFDSCxTQUFTLENBQUNRLElBQUksQ0FBQ0w7UUFDcEIsT0FBTyxJQUFJTix1REFBbUJBLENBQUMsSUFBSSxFQUFFTTtJQUN6QztBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLXNvY2tldHMtY2hhdC1jbGllbnQtYXBwLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2VzbS9TdWJqZWN0LmpzPzdlNGIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLlxyXG4vLyBUaGUgLk5FVCBGb3VuZGF0aW9uIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG5pbXBvcnQgeyBTdWJqZWN0U3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuLyoqIFN0cmVhbSBpbXBsZW1lbnRhdGlvbiB0byBzdHJlYW0gaXRlbXMgdG8gdGhlIHNlcnZlci4gKi9cclxuZXhwb3J0IGNsYXNzIFN1YmplY3Qge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIG5leHQoaXRlbSkge1xyXG4gICAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5vYnNlcnZlcnMpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlcnJvcihlcnIpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IG9ic2VydmVyIG9mIHRoaXMub2JzZXJ2ZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbXBsZXRlKCkge1xyXG4gICAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5vYnNlcnZlcnMpIHtcclxuICAgICAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3Vic2NyaWJlKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJqZWN0U3Vic2NyaXB0aW9uKHRoaXMsIG9ic2VydmVyKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJTdWJqZWN0U3Vic2NyaXB0aW9uIiwiU3ViamVjdCIsImNvbnN0cnVjdG9yIiwib2JzZXJ2ZXJzIiwibmV4dCIsIml0ZW0iLCJvYnNlcnZlciIsImVycm9yIiwiZXJyIiwiY29tcGxldGUiLCJzdWJzY3JpYmUiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/Subject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextMessageFormat: () => (/* binding */ TextMessageFormat)\n/* harmony export */ });\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Not exported from index\n/** @private */ class TextMessageFormat {\n    static write(output) {\n        return `${output}${TextMessageFormat.RecordSeparator}`;\n    }\n    static parse(input) {\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\n            throw new Error(\"Message is incomplete.\");\n        }\n        const messages = input.split(TextMessageFormat.RecordSeparator);\n        messages.pop();\n        return messages;\n    }\n}\nTextMessageFormat.RecordSeparatorCode = 0x1e;\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode); //# sourceMappingURL=TextMessageFormat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvZXNtL1RleHRNZXNzYWdlRm9ybWF0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQ3ZFLDBCQUEwQjtBQUMxQixhQUFhLEdBQ04sTUFBTUE7SUFDVCxPQUFPQyxNQUFNQyxNQUFNLEVBQUU7UUFDakIsT0FBTyxDQUFDLEVBQUVBLE9BQU8sRUFBRUYsa0JBQWtCRyxlQUFlLENBQUMsQ0FBQztJQUMxRDtJQUNBLE9BQU9DLE1BQU1DLEtBQUssRUFBRTtRQUNoQixJQUFJQSxLQUFLLENBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFFLEtBQUtOLGtCQUFrQkcsZUFBZSxFQUFFO1lBQy9ELE1BQU0sSUFBSUksTUFBTTtRQUNwQjtRQUNBLE1BQU1DLFdBQVdILE1BQU1JLEtBQUssQ0FBQ1Qsa0JBQWtCRyxlQUFlO1FBQzlESyxTQUFTRSxHQUFHO1FBQ1osT0FBT0Y7SUFDWDtBQUNKO0FBQ0FSLGtCQUFrQlcsbUJBQW1CLEdBQUc7QUFDeENYLGtCQUFrQkcsZUFBZSxHQUFHUyxPQUFPQyxZQUFZLENBQUNiLGtCQUFrQlcsbUJBQW1CLEdBQzdGLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1zb2NrZXRzLWNoYXQtY2xpZW50LWFwcC8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9lc20vVGV4dE1lc3NhZ2VGb3JtYXQuanM/ZjJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgLk5FVCBGb3VuZGF0aW9uIHVuZGVyIG9uZSBvciBtb3JlIGFncmVlbWVudHMuXHJcbi8vIFRoZSAuTkVUIEZvdW5kYXRpb24gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbi8vIE5vdCBleHBvcnRlZCBmcm9tIGluZGV4XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5leHBvcnQgY2xhc3MgVGV4dE1lc3NhZ2VGb3JtYXQge1xyXG4gICAgc3RhdGljIHdyaXRlKG91dHB1dCkge1xyXG4gICAgICAgIHJldHVybiBgJHtvdXRwdXR9JHtUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3J9YDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBwYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGlmIChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSAhPT0gVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gaW5wdXQuc3BsaXQoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKTtcclxuICAgICAgICBtZXNzYWdlcy5wb3AoKTtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZXM7XHJcbiAgICB9XHJcbn1cclxuVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSA9IDB4MWU7XHJcblRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRleHRNZXNzYWdlRm9ybWF0LmpzLm1hcCJdLCJuYW1lcyI6WyJUZXh0TWVzc2FnZUZvcm1hdCIsIndyaXRlIiwib3V0cHV0IiwiUmVjb3JkU2VwYXJhdG9yIiwicGFyc2UiLCJpbnB1dCIsImxlbmd0aCIsIkVycm9yIiwibWVzc2FnZXMiLCJzcGxpdCIsInBvcCIsIlJlY29yZFNlcGFyYXRvckNvZGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/Utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arg: () => (/* binding */ Arg),\n/* harmony export */   ConsoleLogger: () => (/* binding */ ConsoleLogger),\n/* harmony export */   Platform: () => (/* binding */ Platform),\n/* harmony export */   SubjectSubscription: () => (/* binding */ SubjectSubscription),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   constructUserAgent: () => (/* binding */ constructUserAgent),\n/* harmony export */   createLogger: () => (/* binding */ createLogger),\n/* harmony export */   formatArrayBuffer: () => (/* binding */ formatArrayBuffer),\n/* harmony export */   getDataDetail: () => (/* binding */ getDataDetail),\n/* harmony export */   getErrorString: () => (/* binding */ getErrorString),\n/* harmony export */   getGlobalThis: () => (/* binding */ getGlobalThis),\n/* harmony export */   getUserAgentHeader: () => (/* binding */ getUserAgentHeader),\n/* harmony export */   isArrayBuffer: () => (/* binding */ isArrayBuffer),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage)\n/* harmony export */ });\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _Loggers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Loggers */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Loggers.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n// Version token that will be replaced by the prepack command\n/** The version of the SignalR client. */ const VERSION = \"8.0.0\";\n/** @private */ class Arg {\n    static isRequired(val, name) {\n        if (val === null || val === undefined) {\n            throw new Error(`The '${name}' argument is required.`);\n        }\n    }\n    static isNotEmpty(val, name) {\n        if (!val || val.match(/^\\s*$/)) {\n            throw new Error(`The '${name}' argument should not be empty.`);\n        }\n    }\n    static isIn(val, values, name) {\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\n        if (!(val in values)) {\n            throw new Error(`Unknown ${name} value: ${val}.`);\n        }\n    }\n}\n/** @private */ class Platform {\n    // react-native has a window but no document so we should check both\n    static get isBrowser() {\n        return !Platform.isNode && \"undefined\" === \"object\" && 0;\n    }\n    // WebWorkers don't have a window object so the isBrowser check would fail\n    static get isWebWorker() {\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\n    }\n    // react-native has a window but no document\n    static get isReactNative() {\n        return !Platform.isNode && \"undefined\" === \"object\" && 0;\n    }\n    // Node apps shouldn't have a window object, but WebWorkers don't either\n    // so we need to check for both WebWorker and window\n    static get isNode() {\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\n    }\n}\n/** @private */ function getDataDetail(data, includeContent) {\n    let detail = \"\";\n    if (isArrayBuffer(data)) {\n        detail = `Binary data of length ${data.byteLength}`;\n        if (includeContent) {\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\n        }\n    } else if (typeof data === \"string\") {\n        detail = `String data of length ${data.length}`;\n        if (includeContent) {\n            detail += `. Content: '${data}'`;\n        }\n    }\n    return detail;\n}\n/** @private */ function formatArrayBuffer(data) {\n    const view = new Uint8Array(data);\n    // Uint8Array.map only supports returning another Uint8Array?\n    let str = \"\";\n    view.forEach((num)=>{\n        const pad = num < 16 ? \"0\" : \"\";\n        str += `0x${pad}${num.toString(16)} `;\n    });\n    // Trim of trailing space.\n    return str.substr(0, str.length - 1);\n}\n// Also in signalr-protocol-msgpack/Utils.ts\n/** @private */ function isArrayBuffer(val) {\n    return val && typeof ArrayBuffer !== \"undefined\" && (val instanceof ArrayBuffer || // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\n    val.constructor && val.constructor.name === \"ArrayBuffer\");\n}\n/** @private */ async function sendMessage(logger, transportName, httpClient, url, content, options) {\n    const headers = {};\n    const [name, value] = getUserAgentHeader();\n    headers[name] = value;\n    logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\n    const response = await httpClient.post(url, {\n        content,\n        headers: {\n            ...headers,\n            ...options.headers\n        },\n        responseType,\n        timeout: options.timeout,\n        withCredentials: options.withCredentials\n    });\n    logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\n}\n/** @private */ function createLogger(logger) {\n    if (logger === undefined) {\n        return new ConsoleLogger(_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information);\n    }\n    if (logger === null) {\n        return _Loggers__WEBPACK_IMPORTED_MODULE_1__.NullLogger.instance;\n    }\n    if (logger.log !== undefined) {\n        return logger;\n    }\n    return new ConsoleLogger(logger);\n}\n/** @private */ class SubjectSubscription {\n    constructor(subject, observer){\n        this._subject = subject;\n        this._observer = observer;\n    }\n    dispose() {\n        const index = this._subject.observers.indexOf(this._observer);\n        if (index > -1) {\n            this._subject.observers.splice(index, 1);\n        }\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\n            this._subject.cancelCallback().catch((_)=>{});\n        }\n    }\n}\n/** @private */ class ConsoleLogger {\n    constructor(minimumLogLevel){\n        this._minLevel = minimumLogLevel;\n        this.out = console;\n    }\n    log(logLevel, message) {\n        if (logLevel >= this._minLevel) {\n            const msg = `[${new Date().toISOString()}] ${_ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel[logLevel]}: ${message}`;\n            switch(logLevel){\n                case _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Critical:\n                case _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error:\n                    this.out.error(msg);\n                    break;\n                case _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning:\n                    this.out.warn(msg);\n                    break;\n                case _ILogger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Information:\n                    this.out.info(msg);\n                    break;\n                default:\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\n                    this.out.log(msg);\n                    break;\n            }\n        }\n    }\n}\n/** @private */ function getUserAgentHeader() {\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\n    if (Platform.isNode) {\n        userAgentHeaderName = \"User-Agent\";\n    }\n    return [\n        userAgentHeaderName,\n        constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())\n    ];\n}\n/** @private */ function constructUserAgent(version, os, runtime, runtimeVersion) {\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\n    let userAgent = \"Microsoft SignalR/\";\n    const majorAndMinor = version.split(\".\");\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\n    userAgent += ` (${version}; `;\n    if (os && os !== \"\") {\n        userAgent += `${os}; `;\n    } else {\n        userAgent += \"Unknown OS; \";\n    }\n    userAgent += `${runtime}`;\n    if (runtimeVersion) {\n        userAgent += `; ${runtimeVersion}`;\n    } else {\n        userAgent += \"; Unknown Runtime Version\";\n    }\n    userAgent += \")\";\n    return userAgent;\n}\n// eslint-disable-next-line spaced-comment\n/*#__PURE__*/ function getOsName() {\n    if (Platform.isNode) {\n        switch(process.platform){\n            case \"win32\":\n                return \"Windows NT\";\n            case \"darwin\":\n                return \"macOS\";\n            case \"linux\":\n                return \"Linux\";\n            default:\n                return process.platform;\n        }\n    } else {\n        return \"\";\n    }\n}\n// eslint-disable-next-line spaced-comment\n/*#__PURE__*/ function getRuntimeVersion() {\n    if (Platform.isNode) {\n        return process.versions.node;\n    }\n    return undefined;\n}\nfunction getRuntime() {\n    if (Platform.isNode) {\n        return \"NodeJS\";\n    } else {\n        return \"Browser\";\n    }\n}\n/** @private */ function getErrorString(e) {\n    if (e.stack) {\n        return e.stack;\n    } else if (e.message) {\n        return e.message;\n    }\n    return `${e}`;\n}\n/** @private */ function getGlobalThis() {\n    // globalThis is semi-new and not available in Node until v12\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw new Error(\"could not find global\");\n} //# sourceMappingURL=Utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js":
/*!************************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketTransport: () => (/* binding */ WebSocketTransport)\n/* harmony export */ });\n/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HeaderNames */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HeaderNames.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _ITransport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ITransport */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ITransport.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\n/** @private */ class WebSocketTransport {\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers){\n        this._logger = logger;\n        this._accessTokenFactory = accessTokenFactory;\n        this._logMessageContent = logMessageContent;\n        this._webSocketConstructor = webSocketConstructor;\n        this._httpClient = httpClient;\n        this.onreceive = null;\n        this.onclose = null;\n        this._headers = headers;\n    }\n    async connect(url, transferFormat) {\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isRequired(url, \"url\");\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isRequired(transferFormat, \"transferFormat\");\n        _Utils__WEBPACK_IMPORTED_MODULE_0__.Arg.isIn(transferFormat, _ITransport__WEBPACK_IMPORTED_MODULE_1__.TransferFormat, \"transferFormat\");\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n        let token;\n        if (this._accessTokenFactory) {\n            token = await this._accessTokenFactory();\n        }\n        return new Promise((resolve, reject)=>{\n            url = url.replace(/^http/, \"ws\");\n            let webSocket;\n            const cookies = this._httpClient.getCookieString(url);\n            let opened = false;\n            if (_Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isNode || _Utils__WEBPACK_IMPORTED_MODULE_0__.Platform.isReactNative) {\n                const headers = {};\n                const [name, value] = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeader)();\n                headers[name] = value;\n                if (token) {\n                    headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.Authorization] = `Bearer ${token}`;\n                }\n                if (cookies) {\n                    headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.Cookie] = cookies;\n                }\n                // Only pass headers when in non-browser environments\n                webSocket = new this._webSocketConstructor(url, undefined, {\n                    headers: {\n                        ...headers,\n                        ...this._headers\n                    }\n                });\n            } else {\n                if (token) {\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n                }\n            }\n            if (!webSocket) {\n                // Chrome is not happy with passing 'undefined' as protocol\n                webSocket = new this._webSocketConstructor(url);\n            }\n            if (transferFormat === _ITransport__WEBPACK_IMPORTED_MODULE_1__.TransferFormat.Binary) {\n                webSocket.binaryType = \"arraybuffer\";\n            }\n            webSocket.onopen = (_event)=>{\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Information, `WebSocket connected to ${url}.`);\n                this._webSocket = webSocket;\n                opened = true;\n                resolve();\n            };\n            webSocket.onerror = (event)=>{\n                let error = null;\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                    error = event.error;\n                } else {\n                    error = \"There was an error with the transport\";\n                }\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Information, `(WebSockets transport) ${error}.`);\n            };\n            webSocket.onmessage = (message)=>{\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Trace, `(WebSockets transport) data received. ${(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.getDataDetail)(message.data, this._logMessageContent)}.`);\n                if (this.onreceive) {\n                    try {\n                        this.onreceive(message.data);\n                    } catch (error) {\n                        this._close(error);\n                        return;\n                    }\n                }\n            };\n            webSocket.onclose = (event)=>{\n                // Don't call close handler if connection was never established\n                // We'll reject the connect call instead\n                if (opened) {\n                    this._close(event);\n                } else {\n                    let error = null;\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                        error = event.error;\n                    } else {\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\" + \" either the endpoint may not be a SignalR endpoint,\" + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\" + \" If you have multiple servers check that sticky sessions are enabled.\";\n                    }\n                    reject(new Error(error));\n                }\n            };\n        });\n    }\n    send(data) {\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\n            this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Trace, `(WebSockets transport) sending data. ${(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.getDataDetail)(data, this._logMessageContent)}.`);\n            this._webSocket.send(data);\n            return Promise.resolve();\n        }\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\n    }\n    stop() {\n        if (this._webSocket) {\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n            this._close(undefined);\n        }\n        return Promise.resolve();\n    }\n    _close(event) {\n        // webSocket will be null if the transport did not start successfully\n        if (this._webSocket) {\n            // Clear websocket handlers because we are considering the socket closed now\n            this._webSocket.onclose = ()=>{};\n            this._webSocket.onmessage = ()=>{};\n            this._webSocket.onerror = ()=>{};\n            this._webSocket.close();\n            this._webSocket = undefined;\n        }\n        this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n        if (this.onclose) {\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\n            } else if (event instanceof Error) {\n                this.onclose(event);\n            } else {\n                this.onclose();\n            }\n        }\n    }\n    _isCloseEvent(event) {\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\n    }\n} //# sourceMappingURL=WebSocketTransport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XhrHttpClient: () => (/* binding */ XhrHttpClient)\n/* harmony export */ });\n/* harmony import */ var _Errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Errors.js\");\n/* harmony import */ var _HttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HttpClient */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js\");\n/* harmony import */ var _ILogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ILogger */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/ILogger.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/@microsoft/signalr/dist/esm/Utils.js\");\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n\n\n\nclass XhrHttpClient extends _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpClient {\n    constructor(logger){\n        super();\n        this._logger = logger;\n    }\n    /** @inheritDoc */ send(request) {\n        // Check that abort was not signaled before calling send\n        if (request.abortSignal && request.abortSignal.aborted) {\n            return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_1__.AbortError());\n        }\n        if (!request.method) {\n            return Promise.reject(new Error(\"No method defined.\"));\n        }\n        if (!request.url) {\n            return Promise.reject(new Error(\"No url defined.\"));\n        }\n        return new Promise((resolve, reject)=>{\n            const xhr = new XMLHttpRequest();\n            xhr.open(request.method, request.url, true);\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            if (request.content === \"\") {\n                request.content = undefined;\n            }\n            if (request.content) {\n                // Explicitly setting the Content-Type header for React Native on Android platform.\n                if ((0,_Utils__WEBPACK_IMPORTED_MODULE_2__.isArrayBuffer)(request.content)) {\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                } else {\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n                }\n            }\n            const headers = request.headers;\n            if (headers) {\n                Object.keys(headers).forEach((header)=>{\n                    xhr.setRequestHeader(header, headers[header]);\n                });\n            }\n            if (request.responseType) {\n                xhr.responseType = request.responseType;\n            }\n            if (request.abortSignal) {\n                request.abortSignal.onabort = ()=>{\n                    xhr.abort();\n                    reject(new _Errors__WEBPACK_IMPORTED_MODULE_1__.AbortError());\n                };\n            }\n            if (request.timeout) {\n                xhr.timeout = request.timeout;\n            }\n            xhr.onload = ()=>{\n                if (request.abortSignal) {\n                    request.abortSignal.onabort = null;\n                }\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(new _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n                } else {\n                    reject(new _Errors__WEBPACK_IMPORTED_MODULE_1__.HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\n                }\n            };\n            xhr.onerror = ()=>{\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\n                reject(new _Errors__WEBPACK_IMPORTED_MODULE_1__.HttpError(xhr.statusText, xhr.status));\n            };\n            xhr.ontimeout = ()=>{\n                this._logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.Warning, `Timeout from HTTP request.`);\n                reject(new _Errors__WEBPACK_IMPORTED_MODULE_1__.TimeoutError());\n            };\n            xhr.send(request.content);\n        });\n    }\n} //# sourceMappingURL=XhrHttpClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js\n");

/***/ })

};
;